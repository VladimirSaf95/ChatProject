{
  "uid" : "eacc971cabdf1b30",
  "name" : "test_send_emoji",
  "fullName" : "test.test_messages_functionality#test_send_emoji",
  "historyId" : "7bb320f962adcc3b1847931bf3d7efa9",
  "time" : {
    "start" : 1716741148344,
    "stop" : 1716741148789,
    "duration" : 445
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f1315e224c0>\n\n    @allure.feature(\"Sending Messages\")\n    @allure.story(\"Sending Emoji\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_emoji(api_client):\n        with allure.step(\"Sending emoji and checking response\"):\n            data = {\"body\": \"\uD83D\uDE05\", \"msgtype\": \"m.text\", \"senderId\": f\"@{api_client.senderid}:{api_client.room_second_part}\"}\n    \n            response = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.room.message\",\n                                              json=data)\n    \n            with allure.step(\"Check response code\"):\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:57: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init_authorization",
    "time" : {
      "start" : 1716740522125,
      "stop" : 1716740524559,
      "duration" : 2434
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1716740522125,
      "stop" : 1716740522125,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_client",
    "time" : {
      "start" : 1716740524559,
      "stop" : 1716740524559,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f1315e224c0>\n\n    @allure.feature(\"Sending Messages\")\n    @allure.story(\"Sending Emoji\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_emoji(api_client):\n        with allure.step(\"Sending emoji and checking response\"):\n            data = {\"body\": \"\uD83D\uDE05\", \"msgtype\": \"m.text\", \"senderId\": f\"@{api_client.senderid}:{api_client.room_second_part}\"}\n    \n            response = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.room.message\",\n                                              json=data)\n    \n            with allure.step(\"Check response code\"):\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:57: AssertionError",
    "steps" : [ {
      "name" : "Sending emoji and checking response",
      "time" : {
        "start" : 1716741148344,
        "stop" : 1716741148789,
        "duration" : 445
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 57, in test_send_emoji\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ {
        "name" : "Check response code",
        "time" : {
          "start" : 1716741148788,
          "stop" : 1716741148788,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
        "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 57, in test_send_emoji\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1716741154577,
      "stop" : 1716741154577,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Sending Messages"
  }, {
    "name" : "story",
    "value" : "Sending Emoji"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "70dcc47859d6"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 10,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 165,
        "unknown" : 0,
        "total" : 179
      },
      "items" : [ {
        "uid" : "17dae74faa335f6a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716711751706,
          "stop" : 1716711751895,
          "duration" : 189
        }
      }, {
        "uid" : "9472aedf07b75cd3",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716686647248,
          "stop" : 1716686647864,
          "duration" : 616
        }
      }, {
        "uid" : "cb5210d07e514263",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716654096778,
          "stop" : 1716654097404,
          "duration" : 626
        }
      }, {
        "uid" : "2ebdacfeee90f0a2",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716625386740,
          "stop" : 1716625387370,
          "duration" : 630
        }
      }, {
        "uid" : "99829d543136d027",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716599831832,
          "stop" : 1716599832300,
          "duration" : 468
        }
      }, {
        "uid" : "52e1cbb00b0f0cdb",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716567736564,
          "stop" : 1716567737049,
          "duration" : 485
        }
      }, {
        "uid" : "c9f8938400b622ff",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716539024878,
          "stop" : 1716539025067,
          "duration" : 189
        }
      }, {
        "uid" : "dce9af84cd18983",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716513518676,
          "stop" : 1716513519130,
          "duration" : 454
        }
      }, {
        "uid" : "4f763f034c61acc2",
        "status" : "passed",
        "time" : {
          "start" : 1716481517795,
          "stop" : 1716481518286,
          "duration" : 491
        }
      }, {
        "uid" : "f808922399968be2",
        "status" : "passed",
        "time" : {
          "start" : 1716452596469,
          "stop" : 1716452596935,
          "duration" : 466
        }
      }, {
        "uid" : "10c51e8beeb3f92c",
        "status" : "passed",
        "time" : {
          "start" : 1716427081271,
          "stop" : 1716427081810,
          "duration" : 539
        }
      }, {
        "uid" : "d9ac0fc9d99075c4",
        "status" : "passed",
        "time" : {
          "start" : 1716395147732,
          "stop" : 1716395149018,
          "duration" : 1286
        }
      }, {
        "uid" : "ea2bf3694511d8cf",
        "status" : "passed",
        "time" : {
          "start" : 1716366284398,
          "stop" : 1716366284886,
          "duration" : 488
        }
      }, {
        "uid" : "917db201e5440d78",
        "status" : "passed",
        "time" : {
          "start" : 1716340726884,
          "stop" : 1716340727281,
          "duration" : 397
        }
      }, {
        "uid" : "1f801c220bb95cd1",
        "status" : "passed",
        "time" : {
          "start" : 1716308592844,
          "stop" : 1716308593357,
          "duration" : 513
        }
      }, {
        "uid" : "3700ae1802f1ebea",
        "status" : "passed",
        "time" : {
          "start" : 1716279820526,
          "stop" : 1716279821044,
          "duration" : 518
        }
      }, {
        "uid" : "430897f1da119dd9",
        "status" : "passed",
        "time" : {
          "start" : 1716254294445,
          "stop" : 1716254294929,
          "duration" : 484
        }
      }, {
        "uid" : "e0fe3fa5506126ef",
        "status" : "passed",
        "time" : {
          "start" : 1716222262203,
          "stop" : 1716222262705,
          "duration" : 502
        }
      }, {
        "uid" : "ff0869592606c292",
        "status" : "passed",
        "time" : {
          "start" : 1716193439277,
          "stop" : 1716193439818,
          "duration" : 541
        }
      }, {
        "uid" : "3a9057569a44fca0",
        "status" : "passed",
        "time" : {
          "start" : 1716167938158,
          "stop" : 1716167938705,
          "duration" : 547
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "eacc971cabdf1b30.json",
  "parameterValues" : [ ]
}