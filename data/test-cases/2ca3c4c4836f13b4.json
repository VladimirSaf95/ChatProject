{
  "uid" : "2ca3c4c4836f13b4",
  "name" : "test_send_url",
  "fullName" : "test.test_messages_functionality#test_send_url",
  "historyId" : "4b0586f5f54c42dea3d6cdc7b39df69c",
  "time" : {
    "start" : 1719937631762,
    "stop" : 1719937632439,
    "duration" : 677
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f6b997756a0>\n\n    @allure.feature(\"Sending URLs\")\n    @allure.story(\"Sending Allowed and Disallowed URLs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_url(api_client):\n        with allure.step(\"Sending allowed URL\"):\n            data_url1 = {\"body\": \"google.com\", \"msgtype\": \"m.text\",\n                         \"senderId\": f\"@{api_client.senderid}:{api_client.room_second_part}\"}\n    \n            response1 = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.room.message\",\n                                               json=data_url1)\n    \n            with allure.step(\"Asserting response for allowed URL\"):\n>               assert response1.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:144: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "api_client",
    "time" : {
      "start" : 1719937511554,
      "stop" : 1719937511554,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1719937508362,
      "stop" : 1719937508362,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "init_authorization",
    "time" : {
      "start" : 1719937508362,
      "stop" : 1719937511554,
      "duration" : 3192
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f6b997756a0>\n\n    @allure.feature(\"Sending URLs\")\n    @allure.story(\"Sending Allowed and Disallowed URLs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_url(api_client):\n        with allure.step(\"Sending allowed URL\"):\n            data_url1 = {\"body\": \"google.com\", \"msgtype\": \"m.text\",\n                         \"senderId\": f\"@{api_client.senderid}:{api_client.room_second_part}\"}\n    \n            response1 = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.room.message\",\n                                               json=data_url1)\n    \n            with allure.step(\"Asserting response for allowed URL\"):\n>               assert response1.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:144: AssertionError",
    "steps" : [ {
      "name" : "Sending allowed URL",
      "time" : {
        "start" : 1719937631763,
        "stop" : 1719937632439,
        "duration" : 676
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 144, in test_send_url\n    assert response1.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ {
        "name" : "Asserting response for allowed URL",
        "time" : {
          "start" : 1719937632439,
          "stop" : 1719937632439,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
        "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 144, in test_send_url\n    assert response1.status_code == 200, \"Response status code is not 200\"\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1719937648647,
      "stop" : 1719937648647,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "story",
    "value" : "Sending Allowed and Disallowed URLs"
  }, {
    "name" : "feature",
    "value" : "Sending URLs"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "99f5e786f03f"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 15,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 250,
        "unknown" : 0,
        "total" : 269
      },
      "items" : [ {
        "uid" : "7b3b6d80723b2f9a",
        "status" : "passed",
        "time" : {
          "start" : 1719908683740,
          "stop" : 1719908684910,
          "duration" : 1170
        }
      }, {
        "uid" : "d6c067fec40fb1af",
        "status" : "passed",
        "time" : {
          "start" : 1719883351141,
          "stop" : 1719883352959,
          "duration" : 1818
        }
      }, {
        "uid" : "72bee82e3fc0af2e",
        "status" : "passed",
        "time" : {
          "start" : 1719851052979,
          "stop" : 1719851054649,
          "duration" : 1670
        }
      }, {
        "uid" : "c0a30b90b4985322",
        "status" : "passed",
        "time" : {
          "start" : 1719822383320,
          "stop" : 1719822385807,
          "duration" : 2487
        }
      }, {
        "uid" : "346f89b31f646ee1",
        "status" : "passed",
        "time" : {
          "start" : 1719218116511,
          "stop" : 1719218117618,
          "duration" : 1107
        }
      }, {
        "uid" : "9f7919aeb88cccb",
        "status" : "passed",
        "time" : {
          "start" : 1719192159883,
          "stop" : 1719192161018,
          "duration" : 1135
        }
      }, {
        "uid" : "3566db1a2557e7f4",
        "status" : "passed",
        "time" : {
          "start" : 1719159767645,
          "stop" : 1719159768895,
          "duration" : 1250
        }
      }, {
        "uid" : "124749813285abd4",
        "status" : "passed",
        "time" : {
          "start" : 1719130912438,
          "stop" : 1719130913579,
          "duration" : 1141
        }
      }, {
        "uid" : "3a4111bf1af6ac26",
        "status" : "passed",
        "time" : {
          "start" : 1719105962467,
          "stop" : 1719105963709,
          "duration" : 1242
        }
      }, {
        "uid" : "e6b4bfe4e0b0b809",
        "status" : "passed",
        "time" : {
          "start" : 1719073479080,
          "stop" : 1719073480182,
          "duration" : 1102
        }
      }, {
        "uid" : "83e11d0572b0cc49",
        "status" : "passed",
        "time" : {
          "start" : 1719044597805,
          "stop" : 1719044599080,
          "duration" : 1275
        }
      }, {
        "uid" : "be0a10d0cbf56edd",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1719019269344,
          "stop" : 1719019269632,
          "duration" : 288
        }
      }, {
        "uid" : "73906f9753e28ede",
        "status" : "passed",
        "time" : {
          "start" : 1718987015195,
          "stop" : 1718987016495,
          "duration" : 1300
        }
      }, {
        "uid" : "d55bc08e38fb61d6",
        "status" : "passed",
        "time" : {
          "start" : 1718958826300,
          "stop" : 1718958827461,
          "duration" : 1161
        }
      }, {
        "uid" : "5f0066922abb32fd",
        "status" : "passed",
        "time" : {
          "start" : 1718932839715,
          "stop" : 1718932840431,
          "duration" : 716
        }
      }, {
        "uid" : "fde4be697ff45724",
        "status" : "passed",
        "time" : {
          "start" : 1718900780905,
          "stop" : 1718900782095,
          "duration" : 1190
        }
      }, {
        "uid" : "420120202a12eb8a",
        "status" : "passed",
        "time" : {
          "start" : 1718871899553,
          "stop" : 1718871900985,
          "duration" : 1432
        }
      }, {
        "uid" : "8795022ce6856c28",
        "status" : "passed",
        "time" : {
          "start" : 1718846406536,
          "stop" : 1718846407739,
          "duration" : 1203
        }
      }, {
        "uid" : "4743057a6d3a4f31",
        "status" : "passed",
        "time" : {
          "start" : 1718814833657,
          "stop" : 1718814834402,
          "duration" : 745
        }
      }, {
        "uid" : "dd618e1394358193",
        "status" : "passed",
        "time" : {
          "start" : 1718785495086,
          "stop" : 1718785496343,
          "duration" : 1257
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "2ca3c4c4836f13b4.json",
  "parameterValues" : [ ]
}