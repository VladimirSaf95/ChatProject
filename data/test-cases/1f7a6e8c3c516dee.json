{
  "uid" : "1f7a6e8c3c516dee",
  "name" : "test_send_reaction",
  "fullName" : "test.test_messages_functionality#test_send_reaction",
  "historyId" : "c97f0dca0399de29e1f93fc1150eb31b",
  "time" : {
    "start" : 1713774292400,
    "stop" : 1713774293749,
    "duration" : 1349
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7fae154b7550>\n\n    @allure.feature(\"Reaction to Message\")\n    @allure.story(\"Setting reaction\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_reaction(api_client):\n        with allure.step(\"Setting reaction on message\"):\n            event_id = os.environ.get(\"EVENT_ID_A\")\n            if event_id is None:\n                responseA = api_client.sendmessages(response_b=False)\n                event_id = os.environ.get(\"EVENT_ID_A\")\n    \n            data = {\n                \"m.relates_to\": {\n                    \"event_id\": event_id,\n                    \"key\": \"\uD83D\uDC4D\",\n                    \"rel_type\": \"m.annotation\"\n                }\n            }\n    \n            response = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.reaction\",\n                                              json=data)\n    \n            with allure.step(\"Check response code\"):\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:93: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "api_client",
    "time" : {
      "start" : 1713774219266,
      "stop" : 1713774219266,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "init_authorization",
    "time" : {
      "start" : 1713774208317,
      "stop" : 1713774219266,
      "duration" : 10949
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1713774208317,
      "stop" : 1713774208317,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7fae154b7550>\n\n    @allure.feature(\"Reaction to Message\")\n    @allure.story(\"Setting reaction\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_reaction(api_client):\n        with allure.step(\"Setting reaction on message\"):\n            event_id = os.environ.get(\"EVENT_ID_A\")\n            if event_id is None:\n                responseA = api_client.sendmessages(response_b=False)\n                event_id = os.environ.get(\"EVENT_ID_A\")\n    \n            data = {\n                \"m.relates_to\": {\n                    \"event_id\": event_id,\n                    \"key\": \"\uD83D\uDC4D\",\n                    \"rel_type\": \"m.annotation\"\n                }\n            }\n    \n            response = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.reaction\",\n                                              json=data)\n    \n            with allure.step(\"Check response code\"):\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:93: AssertionError",
    "steps" : [ {
      "name" : "Setting reaction on message",
      "time" : {
        "start" : 1713774292400,
        "stop" : 1713774293749,
        "duration" : 1349
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 93, in test_send_reaction\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ {
        "name" : "Check response code",
        "time" : {
          "start" : 1713774293749,
          "stop" : 1713774293749,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
        "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 93, in test_send_reaction\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1713774374062,
      "stop" : 1713774374062,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "feature",
    "value" : "Reaction to Message"
  }, {
    "name" : "story",
    "value" : "Setting reaction"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "41e1a3701343"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 72,
        "unknown" : 0,
        "total" : 77
      },
      "items" : [ {
        "uid" : "5c8924d752d7ae3",
        "status" : "passed",
        "time" : {
          "start" : 1713748609195,
          "stop" : 1713748609806,
          "duration" : 611
        }
      }, {
        "uid" : "5b975f52b7182b35",
        "status" : "passed",
        "time" : {
          "start" : 1713716540294,
          "stop" : 1713716541210,
          "duration" : 916
        }
      }, {
        "uid" : "554d8ab0b4e2eb7b",
        "status" : "passed",
        "time" : {
          "start" : 1713687674504,
          "stop" : 1713687674802,
          "duration" : 298
        }
      }, {
        "uid" : "1b44f4c26286953e",
        "status" : "passed",
        "time" : {
          "start" : 1713662400668,
          "stop" : 1713662401508,
          "duration" : 840
        }
      }, {
        "uid" : "9a527bfedcf7711b",
        "status" : "passed",
        "time" : {
          "start" : 1713630128880,
          "stop" : 1713630129227,
          "duration" : 347
        }
      }, {
        "uid" : "9b4ebd5aa2fd6232",
        "status" : "passed",
        "time" : {
          "start" : 1713575664932,
          "stop" : 1713575665328,
          "duration" : 396
        }
      }, {
        "uid" : "ecda6d6bf355df98",
        "status" : "passed",
        "time" : {
          "start" : 1713543863788,
          "stop" : 1713543864239,
          "duration" : 451
        }
      }, {
        "uid" : "b16b4827329dc160",
        "status" : "passed",
        "time" : {
          "start" : 1713514957722,
          "stop" : 1713514958021,
          "duration" : 299
        }
      }, {
        "uid" : "9089e670b69b4c7d",
        "status" : "passed",
        "time" : {
          "start" : 1713489879830,
          "stop" : 1713489880464,
          "duration" : 634
        }
      }, {
        "uid" : "c737879ae5963498",
        "status" : "passed",
        "time" : {
          "start" : 1713457400960,
          "stop" : 1713457401367,
          "duration" : 407
        }
      }, {
        "uid" : "ff5f9d19cc0dd8a1",
        "status" : "passed",
        "time" : {
          "start" : 1713428586567,
          "stop" : 1713428586956,
          "duration" : 389
        }
      }, {
        "uid" : "fb8392f5eebe65ef",
        "status" : "passed",
        "time" : {
          "start" : 1713402837480,
          "stop" : 1713402838117,
          "duration" : 637
        }
      }, {
        "uid" : "bca703a8944024da",
        "status" : "passed",
        "time" : {
          "start" : 1713371071379,
          "stop" : 1713371071793,
          "duration" : 414
        }
      }, {
        "uid" : "99d7701e529e1f4c",
        "status" : "passed",
        "time" : {
          "start" : 1713342717918,
          "stop" : 1713342718293,
          "duration" : 375
        }
      }, {
        "uid" : "1b733cee0ed25968",
        "status" : "passed",
        "time" : {
          "start" : 1713316480431,
          "stop" : 1713316481117,
          "duration" : 686
        }
      }, {
        "uid" : "81bab8a62e925e46",
        "status" : "passed",
        "time" : {
          "start" : 1713285169501,
          "stop" : 1713285170085,
          "duration" : 584
        }
      }, {
        "uid" : "b035a340f57df76a",
        "status" : "passed",
        "time" : {
          "start" : 1713255760918,
          "stop" : 1713255761845,
          "duration" : 927
        }
      }, {
        "uid" : "b41625ddae1079de",
        "status" : "passed",
        "time" : {
          "start" : 1713230038398,
          "stop" : 1713230038772,
          "duration" : 374
        }
      }, {
        "uid" : "e5730e10224f21e9",
        "status" : "passed",
        "time" : {
          "start" : 1713198152944,
          "stop" : 1713198153624,
          "duration" : 680
        }
      }, {
        "uid" : "e22f54e67de61713",
        "status" : "passed",
        "time" : {
          "start" : 1713169132537,
          "stop" : 1713169132893,
          "duration" : 356
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "1f7a6e8c3c516dee.json",
  "parameterValues" : [ ]
}