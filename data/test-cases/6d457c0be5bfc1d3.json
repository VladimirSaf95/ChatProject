{
  "uid" : "6d457c0be5bfc1d3",
  "name" : "test_send_url",
  "fullName" : "test.test_messages_functionality#test_send_url",
  "historyId" : "4b0586f5f54c42dea3d6cdc7b39df69c",
  "time" : {
    "start" : 1716711753423,
    "stop" : 1716711754070,
    "duration" : 647
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f3733bddfd0>\n\n    @allure.feature(\"Sending URLs\")\n    @allure.story(\"Sending Allowed and Disallowed URLs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_url(api_client):\n        with allure.step(\"Sending allowed URL\"):\n            data_url1 = {\"body\": \"google.com\", \"msgtype\": \"m.text\",\n                         \"senderId\": f\"@{api_client.senderid}:{api_client.room_second_part}\"}\n    \n            response1 = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.room.message\",\n                                               json=data_url1)\n    \n            with allure.step(\"Asserting response for allowed URL\"):\n>               assert response1.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:144: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init_authorization",
    "time" : {
      "start" : 1716711699674,
      "stop" : 1716711702753,
      "duration" : 3079
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1716711699674,
      "stop" : 1716711699674,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "api_client",
    "time" : {
      "start" : 1716711702753,
      "stop" : 1716711702753,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f3733bddfd0>\n\n    @allure.feature(\"Sending URLs\")\n    @allure.story(\"Sending Allowed and Disallowed URLs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_url(api_client):\n        with allure.step(\"Sending allowed URL\"):\n            data_url1 = {\"body\": \"google.com\", \"msgtype\": \"m.text\",\n                         \"senderId\": f\"@{api_client.senderid}:{api_client.room_second_part}\"}\n    \n            response1 = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.room.message\",\n                                               json=data_url1)\n    \n            with allure.step(\"Asserting response for allowed URL\"):\n>               assert response1.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:144: AssertionError",
    "steps" : [ {
      "name" : "Sending allowed URL",
      "time" : {
        "start" : 1716711753423,
        "stop" : 1716711754069,
        "duration" : 646
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 144, in test_send_url\n    assert response1.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ {
        "name" : "Asserting response for allowed URL",
        "time" : {
          "start" : 1716711754069,
          "stop" : 1716711754069,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
        "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 144, in test_send_url\n    assert response1.status_code == 200, \"Response status code is not 200\"\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1716711761021,
      "stop" : 1716711761021,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Sending Allowed and Disallowed URLs"
  }, {
    "name" : "feature",
    "value" : "Sending URLs"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "395cb25544a8"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 9,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 165,
        "unknown" : 0,
        "total" : 178
      },
      "items" : [ {
        "uid" : "f52a1c2a2ec6df9",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716686648899,
          "stop" : 1716686649567,
          "duration" : 668
        }
      }, {
        "uid" : "1c0e1d264c5b0b51",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716654099360,
          "stop" : 1716654099980,
          "duration" : 620
        }
      }, {
        "uid" : "857d78b73b1b3062",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716625388924,
          "stop" : 1716625389539,
          "duration" : 615
        }
      }, {
        "uid" : "bd79b4fdfa88ac14",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716599833774,
          "stop" : 1716599834216,
          "duration" : 442
        }
      }, {
        "uid" : "ee86dbc5133a8cf9",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716567738516,
          "stop" : 1716567738678,
          "duration" : 162
        }
      }, {
        "uid" : "9fb225e48fcf3d0a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716539027005,
          "stop" : 1716539027676,
          "duration" : 671
        }
      }, {
        "uid" : "dba7b9f2280a2b5b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716513521591,
          "stop" : 1716513522065,
          "duration" : 474
        }
      }, {
        "uid" : "8f1321d270336edc",
        "status" : "passed",
        "time" : {
          "start" : 1716481519623,
          "stop" : 1716481520385,
          "duration" : 762
        }
      }, {
        "uid" : "6c86d9698ba33475",
        "status" : "passed",
        "time" : {
          "start" : 1716452597669,
          "stop" : 1716452598259,
          "duration" : 590
        }
      }, {
        "uid" : "1a606ca1088f2b15",
        "status" : "passed",
        "time" : {
          "start" : 1716427082895,
          "stop" : 1716427084148,
          "duration" : 1253
        }
      }, {
        "uid" : "678ad084d724bf8d",
        "status" : "passed",
        "time" : {
          "start" : 1716395150720,
          "stop" : 1716395151706,
          "duration" : 986
        }
      }, {
        "uid" : "d32e8393281a39ca",
        "status" : "passed",
        "time" : {
          "start" : 1716366285707,
          "stop" : 1716366286649,
          "duration" : 942
        }
      }, {
        "uid" : "f6f66cd1bdfd2c48",
        "status" : "passed",
        "time" : {
          "start" : 1716340728212,
          "stop" : 1716340729051,
          "duration" : 839
        }
      }, {
        "uid" : "efbdc619f8f8c174",
        "status" : "passed",
        "time" : {
          "start" : 1716308594162,
          "stop" : 1716308595379,
          "duration" : 1217
        }
      }, {
        "uid" : "a945237b482fee1f",
        "status" : "passed",
        "time" : {
          "start" : 1716279821834,
          "stop" : 1716279823098,
          "duration" : 1264
        }
      }, {
        "uid" : "a3bd3ee53c239fe6",
        "status" : "passed",
        "time" : {
          "start" : 1716254296462,
          "stop" : 1716254298097,
          "duration" : 1635
        }
      }, {
        "uid" : "121546b275c77028",
        "status" : "passed",
        "time" : {
          "start" : 1716222263948,
          "stop" : 1716222264938,
          "duration" : 990
        }
      }, {
        "uid" : "35b82329baa64bcb",
        "status" : "passed",
        "time" : {
          "start" : 1716193441240,
          "stop" : 1716193443067,
          "duration" : 1827
        }
      }, {
        "uid" : "bae11ef6cebaea8e",
        "status" : "passed",
        "time" : {
          "start" : 1716167940062,
          "stop" : 1716167940785,
          "duration" : 723
        }
      }, {
        "uid" : "ae0956b82a2853d4",
        "status" : "passed",
        "time" : {
          "start" : 1716136334131,
          "stop" : 1716136334975,
          "duration" : 844
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6d457c0be5bfc1d3.json",
  "parameterValues" : [ ]
}