{
  "uid" : "4cd77e5641e95c22",
  "name" : "test_pinned_msg",
  "fullName" : "test.test_messages_functionality#test_pinned_msg",
  "historyId" : "ecdfbf7aa572308243a68350daaed9a0",
  "time" : {
    "start" : 1719937635150,
    "stop" : 1719937636021,
    "duration" : 871
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.9/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6b9aab9f10>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"robots\" content=\"noindex,nofollow,noar....\\n        We will fix it as soon as possible. Sorry for any inconvenience caused.\\n    </p>\\n</div>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\napi_client = <fixture.api_client.APIClient object at 0x7f6b997756a0>\n\n    @allure.feature(\"Message Pinning\")\n    @allure.story(\"Message Pinning by Moderator\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_pinned_msg(api_client):\n        with allure.step(\"Sending message\"):\n            event_id = os.environ.get(\"EVENT_ID_B\")\n            if event_id is None:\n>               responseB = api_client.sendmessages(response_a=False)\n\ntest/test_messages_functionality.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture/api_client.py:74: in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_client",
    "time" : {
      "start" : 1719937511554,
      "stop" : 1719937511554,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1719937508362,
      "stop" : 1719937508362,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "init_authorization",
    "time" : {
      "start" : 1719937508362,
      "stop" : 1719937511554,
      "duration" : 3192
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.9/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6b9aab9f10>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"robots\" content=\"noindex,nofollow,noar....\\n        We will fix it as soon as possible. Sorry for any inconvenience caused.\\n    </p>\\n</div>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\napi_client = <fixture.api_client.APIClient object at 0x7f6b997756a0>\n\n    @allure.feature(\"Message Pinning\")\n    @allure.story(\"Message Pinning by Moderator\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_pinned_msg(api_client):\n        with allure.step(\"Sending message\"):\n            event_id = os.environ.get(\"EVENT_ID_B\")\n            if event_id is None:\n>               responseB = api_client.sendmessages(response_a=False)\n\ntest/test_messages_functionality.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture/api_client.py:74: in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Sending message",
      "time" : {
        "start" : 1719937635150,
        "stop" : 1719937636020,
        "duration" : 870
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 246, in test_pinned_msg\n    responseB = api_client.sendmessages(response_a=False)\n  File \"/usr/workspace/fixture/api_client.py\", line 74, in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n  File \"/usr/local/lib/python3.9/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1719937648647,
      "stop" : 1719937648647,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Message Pinning by Moderator"
  }, {
    "name" : "feature",
    "value" : "Message Pinning"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "99f5e786f03f"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 16,
        "skipped" : 0,
        "passed" : 252,
        "unknown" : 0,
        "total" : 269
      },
      "items" : [ {
        "uid" : "c9d79d840b9f5d53",
        "status" : "passed",
        "time" : {
          "start" : 1719908686661,
          "stop" : 1719908686999,
          "duration" : 338
        }
      }, {
        "uid" : "236abd84fd63e393",
        "status" : "passed",
        "time" : {
          "start" : 1719883354829,
          "stop" : 1719883355683,
          "duration" : 854
        }
      }, {
        "uid" : "c96a2d18c50de335",
        "status" : "passed",
        "time" : {
          "start" : 1719851056375,
          "stop" : 1719851057207,
          "duration" : 832
        }
      }, {
        "uid" : "c4968ef5eb3c7de7",
        "status" : "passed",
        "time" : {
          "start" : 1719822391323,
          "stop" : 1719822392857,
          "duration" : 1534
        }
      }, {
        "uid" : "bc52243c39d838ec",
        "status" : "passed",
        "time" : {
          "start" : 1719218119709,
          "stop" : 1719218120190,
          "duration" : 481
        }
      }, {
        "uid" : "9da6d834d999e355",
        "status" : "passed",
        "time" : {
          "start" : 1719192162553,
          "stop" : 1719192162855,
          "duration" : 302
        }
      }, {
        "uid" : "c7bca1067d508c3a",
        "status" : "passed",
        "time" : {
          "start" : 1719159771553,
          "stop" : 1719159771976,
          "duration" : 423
        }
      }, {
        "uid" : "5a5020443d464c8",
        "status" : "passed",
        "time" : {
          "start" : 1719130915243,
          "stop" : 1719130915533,
          "duration" : 290
        }
      }, {
        "uid" : "bbd9cf5e03fa4f95",
        "status" : "passed",
        "time" : {
          "start" : 1719105965437,
          "stop" : 1719105965750,
          "duration" : 313
        }
      }, {
        "uid" : "4b21bb4afc583484",
        "status" : "passed",
        "time" : {
          "start" : 1719073481824,
          "stop" : 1719073482132,
          "duration" : 308
        }
      }, {
        "uid" : "644c40ca048ed9e8",
        "status" : "passed",
        "time" : {
          "start" : 1719044601286,
          "stop" : 1719044602158,
          "duration" : 872
        }
      }, {
        "uid" : "ebf8563bae9165ef",
        "status" : "passed",
        "time" : {
          "start" : 1719019272469,
          "stop" : 1719019273901,
          "duration" : 1432
        }
      }, {
        "uid" : "11ba2ba300f87784",
        "status" : "passed",
        "time" : {
          "start" : 1718987017942,
          "stop" : 1718987018607,
          "duration" : 665
        }
      }, {
        "uid" : "79e2affee9185ac6",
        "status" : "passed",
        "time" : {
          "start" : 1718958828789,
          "stop" : 1718958829391,
          "duration" : 602
        }
      }, {
        "uid" : "5d32819f616964f",
        "status" : "passed",
        "time" : {
          "start" : 1718932842090,
          "stop" : 1718932842457,
          "duration" : 367
        }
      }, {
        "uid" : "285d987efe352a02",
        "status" : "passed",
        "time" : {
          "start" : 1718900783779,
          "stop" : 1718900784084,
          "duration" : 305
        }
      }, {
        "uid" : "c8cd5cb455ad445",
        "status" : "passed",
        "time" : {
          "start" : 1718871903001,
          "stop" : 1718871903702,
          "duration" : 701
        }
      }, {
        "uid" : "6c1036cc03b4e380",
        "status" : "passed",
        "time" : {
          "start" : 1718846409353,
          "stop" : 1718846409678,
          "duration" : 325
        }
      }, {
        "uid" : "8dd56b0397e57141",
        "status" : "passed",
        "time" : {
          "start" : 1718814836589,
          "stop" : 1718814837005,
          "duration" : 416
        }
      }, {
        "uid" : "60143b76511a4aac",
        "status" : "passed",
        "time" : {
          "start" : 1718785498759,
          "stop" : 1718785499233,
          "duration" : 474
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "4cd77e5641e95c22.json",
  "parameterValues" : [ ]
}