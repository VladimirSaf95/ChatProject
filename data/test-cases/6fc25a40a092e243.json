{
  "uid" : "6fc25a40a092e243",
  "name" : "test_show_chat_messages",
  "fullName" : "test.test_show_messages#test_show_chat_messages",
  "historyId" : "bf95ccec49a675867305b09ce0026f13",
  "time" : {
    "start" : 1716513526412,
    "stop" : 1716513527460,
    "duration" : 1048
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.9/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f097cf65f10>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"robots\" content=\"noindex,nofollow,noar....\\n        We will fix it as soon as possible. Sorry for any inconvenience caused.\\n    </p>\\n</div>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\napp = <fixture.application.Application object at 0x7f097bd7d0a0>\napi_client = <fixture.api_client.APIClient object at 0x7f097be65f40>\n\n    @allure.feature(\"Chat Functionality\")\n    @allure.story(\"Showing Chat Messages\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_show_chat_messages(app, api_client):\n        helper_base = HelperBase(app)\n    \n        with allure.step(\"Checking if chat is open\"):\n            # Проверка, если чат открыт\n            if not helper_base.check_chatbutton_existence():\n                helper_base.clickchatbutton()\n    \n        # Получаем айди сообщения отправленного ранее\n        event_id = os.environ.get(\"EVENT_ID_A\")\n    \n        # Проверка, что event_id был получен в предыдущем тесте\n        if event_id is None:\n>           responseA = api_client.sendmessages(response_b=False)\n\ntest/test_show_messages.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture/api_client.py:74: in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init_authorization",
    "time" : {
      "start" : 1716513467287,
      "stop" : 1716513469786,
      "duration" : 2499
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "config",
    "time" : {
      "start" : 1716513467287,
      "stop" : 1716513467287,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "app",
    "time" : {
      "start" : 1716513490865,
      "stop" : 1716513492064,
      "duration" : 1199
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "api_client",
    "time" : {
      "start" : 1716513469786,
      "stop" : 1716513469786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.9/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f097cf65f10>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"robots\" content=\"noindex,nofollow,noar....\\n        We will fix it as soon as possible. Sorry for any inconvenience caused.\\n    </p>\\n</div>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\napp = <fixture.application.Application object at 0x7f097bd7d0a0>\napi_client = <fixture.api_client.APIClient object at 0x7f097be65f40>\n\n    @allure.feature(\"Chat Functionality\")\n    @allure.story(\"Showing Chat Messages\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_show_chat_messages(app, api_client):\n        helper_base = HelperBase(app)\n    \n        with allure.step(\"Checking if chat is open\"):\n            # Проверка, если чат открыт\n            if not helper_base.check_chatbutton_existence():\n                helper_base.clickchatbutton()\n    \n        # Получаем айди сообщения отправленного ранее\n        event_id = os.environ.get(\"EVENT_ID_A\")\n    \n        # Проверка, что event_id был получен в предыдущем тесте\n        if event_id is None:\n>           responseA = api_client.sendmessages(response_b=False)\n\ntest/test_show_messages.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture/api_client.py:74: in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Checking if chat is open",
      "time" : {
        "start" : 1716513526516,
        "stop" : 1716513526567,
        "duration" : 51
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1
  },
  "afterStages" : [ {
    "name" : "app::0",
    "time" : {
      "start" : 1716513527491,
      "stop" : 1716513527558,
      "duration" : 67
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "api_client::0",
    "time" : {
      "start" : 1716513527559,
      "stop" : 1716513527559,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Showing Chat Messages"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "feature",
    "value" : "Chat Functionality"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_show_messages"
  }, {
    "name" : "host",
    "value" : "cb262437008e"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_show_messages"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 29,
        "broken" : 30,
        "skipped" : 0,
        "passed" : 112,
        "unknown" : 0,
        "total" : 171
      },
      "items" : [ {
        "uid" : "3b3e8a80c3781f93",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $fO-0zeFGFxWYI0rfQdjYtbL3SV3zXn82kyznmou0kvk не найдено.\nassert []",
        "time" : {
          "start" : 1716481594488,
          "stop" : 1716481597676,
          "duration" : 3188
        }
      }, {
        "uid" : "52dfc71b541d6d2f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $DSAX96TZt-QXCDtuBAfuACO3lXtRV61P_R0PWHozX5U не найдено.\nassert []",
        "time" : {
          "start" : 1716452671372,
          "stop" : 1716452674544,
          "duration" : 3172
        }
      }, {
        "uid" : "686ea8e2fd2ad048",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $kyNHIWmOUWYyPJ52AGoAmZKntCcROadm_DGIjFuReUU не найдено.\nassert []",
        "time" : {
          "start" : 1716427157141,
          "stop" : 1716427160311,
          "duration" : 3170
        }
      }, {
        "uid" : "cdb7d241adc77ddb",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $1sfpHYx0bPfoVF4tgUlD3Qj3pDOwXm3tYfZHjM4R-zk не найдено.\nassert []",
        "time" : {
          "start" : 1716395226620,
          "stop" : 1716395229792,
          "duration" : 3172
        }
      }, {
        "uid" : "25a84faec2d38136",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $vl7VVjkET7aW_IERMjVBq532cUudr6ilTPV1TV9XVG4 не найдено.\nassert []",
        "time" : {
          "start" : 1716366359620,
          "stop" : 1716366362794,
          "duration" : 3174
        }
      }, {
        "uid" : "eac14fe0994eb224",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $d5HvlJJLjMpPFKVeY1cBdGAu_U7etkiskpEevmYuXLs не найдено.\nassert []",
        "time" : {
          "start" : 1716340801883,
          "stop" : 1716340805062,
          "duration" : 3179
        }
      }, {
        "uid" : "8897602d6e79c4a7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $jTNxdlLI86YKnVRVb6iEIywMpQJZBai7fl9j1iuRJEE не найдено.\nassert []",
        "time" : {
          "start" : 1716308668917,
          "stop" : 1716308672085,
          "duration" : 3168
        }
      }, {
        "uid" : "e7185835391b196f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $Iag18BwbBNPCCsrnTMXS6ZHjf07od1ejRb5lz1pyXCs не найдено.\nassert []",
        "time" : {
          "start" : 1716279896588,
          "stop" : 1716279899759,
          "duration" : 3171
        }
      }, {
        "uid" : "3e892e0df80b1723",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $5b8jo1to-eGMr3gNZqP13PB-EN42vmyYadfGoXTD2KM не найдено.\nassert []",
        "time" : {
          "start" : 1716254370927,
          "stop" : 1716254374094,
          "duration" : 3167
        }
      }, {
        "uid" : "404dbe2b31571c59",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $g7MHRyauOvpKzIzEI3wp9V9wRVLT7WbXCmSXPR28o18 не найдено.\nassert []",
        "time" : {
          "start" : 1716222338955,
          "stop" : 1716222342134,
          "duration" : 3179
        }
      }, {
        "uid" : "8cab1d89b8b6b8c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $MTTzMm8-pBECzYGQDCcS0tu80-ZVNj1NI8M_GIojoNg не найдено.\nassert []",
        "time" : {
          "start" : 1716193516888,
          "stop" : 1716193520067,
          "duration" : 3179
        }
      }, {
        "uid" : "8ae2b0fa71b7470a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $bdRULEsKaHbA0SU-brsEB_S7Q0NsfJsJuKj8V6xigBM не найдено.\nassert []",
        "time" : {
          "start" : 1716168014665,
          "stop" : 1716168017835,
          "duration" : 3170
        }
      }, {
        "uid" : "dcb0612ac113ff0b",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom timeout: Timed out receiving message from renderer: 600.000\n  (Session info: headless chrome=102.0.5005.182)",
        "time" : {
          "start" : 1716136409833,
          "stop" : 1716136409833,
          "duration" : 0
        }
      }, {
        "uid" : "75a2b17e8ada3b78",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom timeout: Timed out receiving message from renderer: 600.000\n  (Session info: headless chrome=102.0.5005.182)",
        "time" : {
          "start" : 1716107562947,
          "stop" : 1716107562947,
          "duration" : 0
        }
      }, {
        "uid" : "d432c5d74acb85f6",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom timeout: Timed out receiving message from renderer: 600.000\n  (Session info: headless chrome=102.0.5005.182)",
        "time" : {
          "start" : 1716082432867,
          "stop" : 1716082432867,
          "duration" : 0
        }
      }, {
        "uid" : "caaa33193fbb4e9a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $EJZhm09k-vFZ3kZof2K7OREyX6Cf2lDxyAOodweHqio не найдено.\nassert []",
        "time" : {
          "start" : 1716049406747,
          "stop" : 1716049409919,
          "duration" : 3172
        }
      }, {
        "uid" : "d730956c4ffca356",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $VeFlwp8mFL-t-3Zk_4q1fxm1mM_4aCyCVx1pgXUTpCY не найдено.\nassert []",
        "time" : {
          "start" : 1716020569701,
          "stop" : 1716020572873,
          "duration" : 3172
        }
      }, {
        "uid" : "bb397edd8cd7c7be",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $_OtExkOGMS9hZ-yqZXlIHweT1-pNnCKl_rWqwWy6KgA не найдено.\nassert []",
        "time" : {
          "start" : 1715995119124,
          "stop" : 1715995122295,
          "duration" : 3171
        }
      }, {
        "uid" : "98eb5e997997bf65",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $FgQ9PULXjVlS1yMGrzB2L2eAmXl02tL9G6K3e99YdC0 не найдено.\nassert []",
        "time" : {
          "start" : 1715963051928,
          "stop" : 1715963055103,
          "duration" : 3175
        }
      }, {
        "uid" : "d50ff50f21228ea2",
        "status" : "failed",
        "statusDetails" : "AssertionError: Сообщение с ID $VtlMsszYJaIvO4Rra5YaPyiQny2rGAjLX9bEz8i_rkM не найдено.\nassert []",
        "time" : {
          "start" : 1715934282743,
          "stop" : 1715934285919,
          "duration" : 3176
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6fc25a40a092e243.json",
  "parameterValues" : [ ]
}