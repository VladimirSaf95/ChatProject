{
  "uid" : "3dfeab1cc083f5e0",
  "name" : "test_send_complaint",
  "fullName" : "test.test_messages_functionality#test_send_complaint",
  "historyId" : "31f8786fe3f6ff4b035b30b6ade7469c",
  "time" : {
    "start" : 1719937633833,
    "stop" : 1719937635111,
    "duration" : 1278
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.9/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6b9aab9f10>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"robots\" content=\"noindex,nofollow,noar....\\n        We will fix it as soon as possible. Sorry for any inconvenience caused.\\n    </p>\\n</div>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\napi_client = <fixture.api_client.APIClient object at 0x7f6b997756a0>\n\n    @allure.feature(\"Sending Complaints\")\n    @allure.story(\"Filing Complaint on Message\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_send_complaint(api_client):\n        event_id = os.environ.get(\"EVENT_ID_A\")\n        if event_id is None:\n>           responseA = api_client.sendmessages(response_b=False)\n\ntest/test_messages_functionality.py:225: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture/api_client.py:74: in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_client",
    "time" : {
      "start" : 1719937511554,
      "stop" : 1719937511554,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1719937508362,
      "stop" : 1719937508362,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "init_authorization",
    "time" : {
      "start" : 1719937508362,
      "stop" : 1719937511554,
      "duration" : 3192
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1719937648647,
      "stop" : 1719937648647,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Sending Complaints"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "Filing Complaint on Message"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "99f5e786f03f"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 16,
        "skipped" : 0,
        "passed" : 251,
        "unknown" : 0,
        "total" : 269
      },
      "items" : [ {
        "uid" : "f4e3169425798f6a",
        "status" : "passed",
        "time" : {
          "start" : 1719908686177,
          "stop" : 1719908686659,
          "duration" : 482
        }
      }, {
        "uid" : "a632b665fa866a97",
        "status" : "passed",
        "time" : {
          "start" : 1719883354147,
          "stop" : 1719883354826,
          "duration" : 679
        }
      }, {
        "uid" : "c928f175949a7778",
        "status" : "passed",
        "time" : {
          "start" : 1719851055381,
          "stop" : 1719851056373,
          "duration" : 992
        }
      }, {
        "uid" : "6a5db6b7b0c5781c",
        "status" : "passed",
        "time" : {
          "start" : 1719822389069,
          "stop" : 1719822391321,
          "duration" : 2252
        }
      }, {
        "uid" : "ba0e2227e4691ee4",
        "status" : "passed",
        "time" : {
          "start" : 1719218118659,
          "stop" : 1719218119707,
          "duration" : 1048
        }
      }, {
        "uid" : "a83e13baad26aaef",
        "status" : "passed",
        "time" : {
          "start" : 1719192162116,
          "stop" : 1719192162550,
          "duration" : 434
        }
      }, {
        "uid" : "5dc5b1b8a37edc28",
        "status" : "passed",
        "time" : {
          "start" : 1719159770531,
          "stop" : 1719159771551,
          "duration" : 1020
        }
      }, {
        "uid" : "338c093e021e62e3",
        "status" : "passed",
        "time" : {
          "start" : 1719130914790,
          "stop" : 1719130915241,
          "duration" : 451
        }
      }, {
        "uid" : "60e8605d8f2db5a",
        "status" : "passed",
        "time" : {
          "start" : 1719105964968,
          "stop" : 1719105965435,
          "duration" : 467
        }
      }, {
        "uid" : "673dbe4d711e08c3",
        "status" : "passed",
        "time" : {
          "start" : 1719073481352,
          "stop" : 1719073481822,
          "duration" : 470
        }
      }, {
        "uid" : "dcf52d26d32c49ec",
        "status" : "passed",
        "time" : {
          "start" : 1719044600295,
          "stop" : 1719044601284,
          "duration" : 989
        }
      }, {
        "uid" : "158b681db2da650d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1719019271016,
          "stop" : 1719019272459,
          "duration" : 1443
        }
      }, {
        "uid" : "ee9fd76b5a43a600",
        "status" : "passed",
        "time" : {
          "start" : 1718987017112,
          "stop" : 1718987017939,
          "duration" : 827
        }
      }, {
        "uid" : "b64723e7fb106670",
        "status" : "passed",
        "time" : {
          "start" : 1718958828300,
          "stop" : 1718958828787,
          "duration" : 487
        }
      }, {
        "uid" : "479150e4d17f7b1",
        "status" : "passed",
        "time" : {
          "start" : 1718932841607,
          "stop" : 1718932842088,
          "duration" : 481
        }
      }, {
        "uid" : "e0c5554611c140ed",
        "status" : "passed",
        "time" : {
          "start" : 1718900783237,
          "stop" : 1718900783776,
          "duration" : 539
        }
      }, {
        "uid" : "4511f0c850f089ea",
        "status" : "passed",
        "time" : {
          "start" : 1718871902123,
          "stop" : 1718871903000,
          "duration" : 877
        }
      }, {
        "uid" : "696d20b43009d356",
        "status" : "passed",
        "time" : {
          "start" : 1718846408870,
          "stop" : 1718846409351,
          "duration" : 481
        }
      }, {
        "uid" : "f3c0c82a10d209bd",
        "status" : "passed",
        "time" : {
          "start" : 1718814836002,
          "stop" : 1718814836587,
          "duration" : 585
        }
      }, {
        "uid" : "d3e93ea4c899c02b",
        "status" : "passed",
        "time" : {
          "start" : 1718785497713,
          "stop" : 1718785498756,
          "duration" : 1043
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "3dfeab1cc083f5e0.json",
  "parameterValues" : [ ]
}