{
  "uid" : "90b12cebbf69f85f",
  "name" : "test_pinned_msg",
  "fullName" : "test.test_messages_functionality#test_pinned_msg",
  "historyId" : "ecdfbf7aa572308243a68350daaed9a0",
  "time" : {
    "start" : 1716567740720,
    "stop" : 1716567741701,
    "duration" : 981
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.9/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb2a9ee7f10>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"robots\" content=\"noindex,nofollow,noar....\\n        We will fix it as soon as possible. Sorry for any inconvenience caused.\\n    </p>\\n</div>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\napi_client = <fixture.api_client.APIClient object at 0x7fb2a8de7fd0>\n\n    @allure.feature(\"Message Pinning\")\n    @allure.story(\"Message Pinning by Moderator\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_pinned_msg(api_client):\n        with allure.step(\"Sending message\"):\n            event_id = os.environ.get(\"EVENT_ID_B\")\n            if event_id is None:\n>               responseB = api_client.sendmessages(response_a=False)\n\ntest/test_messages_functionality.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture/api_client.py:74: in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "config",
    "time" : {
      "start" : 1716567685358,
      "stop" : 1716567685358,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "api_client",
    "time" : {
      "start" : 1716567688460,
      "stop" : 1716567688460,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "init_authorization",
    "time" : {
      "start" : 1716567685358,
      "stop" : 1716567688460,
      "duration" : 3102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.9/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb2a9ee7f10>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"robots\" content=\"noindex,nofollow,noar....\\n        We will fix it as soon as possible. Sorry for any inconvenience caused.\\n    </p>\\n</div>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\napi_client = <fixture.api_client.APIClient object at 0x7fb2a8de7fd0>\n\n    @allure.feature(\"Message Pinning\")\n    @allure.story(\"Message Pinning by Moderator\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_pinned_msg(api_client):\n        with allure.step(\"Sending message\"):\n            event_id = os.environ.get(\"EVENT_ID_B\")\n            if event_id is None:\n>               responseB = api_client.sendmessages(response_a=False)\n\ntest/test_messages_functionality.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture/api_client.py:74: in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Sending message",
      "time" : {
        "start" : 1716567740720,
        "stop" : 1716567741700,
        "duration" : 980
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 246, in test_pinned_msg\n    responseB = api_client.sendmessages(response_a=False)\n  File \"/usr/workspace/fixture/api_client.py\", line 74, in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n  File \"/usr/local/lib/python3.9/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1716567744333,
      "stop" : 1716567744333,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "feature",
    "value" : "Message Pinning"
  }, {
    "name" : "story",
    "value" : "Message Pinning by Moderator"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "1cdd5f2b54bf"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 7,
        "skipped" : 0,
        "passed" : 165,
        "unknown" : 0,
        "total" : 173
      },
      "items" : [ {
        "uid" : "1f25d37ecb790640",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716539028974,
          "stop" : 1716539029350,
          "duration" : 376
        }
      }, {
        "uid" : "4edaa3d590e4cee2",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716513524056,
          "stop" : 1716513525002,
          "duration" : 946
        }
      }, {
        "uid" : "d10c0b2deb1253b4",
        "status" : "passed",
        "time" : {
          "start" : 1716481522155,
          "stop" : 1716481523013,
          "duration" : 858
        }
      }, {
        "uid" : "9027b111b94a83cb",
        "status" : "passed",
        "time" : {
          "start" : 1716452600269,
          "stop" : 1716452600569,
          "duration" : 300
        }
      }, {
        "uid" : "2067ae8aa1348d2",
        "status" : "passed",
        "time" : {
          "start" : 1716427085612,
          "stop" : 1716427086226,
          "duration" : 614
        }
      }, {
        "uid" : "d669a315d073432e",
        "status" : "passed",
        "time" : {
          "start" : 1716395153721,
          "stop" : 1716395154142,
          "duration" : 421
        }
      }, {
        "uid" : "2611230bb16e6ea5",
        "status" : "passed",
        "time" : {
          "start" : 1716366288435,
          "stop" : 1716366288771,
          "duration" : 336
        }
      }, {
        "uid" : "c3e63824ff35c818",
        "status" : "passed",
        "time" : {
          "start" : 1716340730823,
          "stop" : 1716340731378,
          "duration" : 555
        }
      }, {
        "uid" : "f5e6be362f29955b",
        "status" : "passed",
        "time" : {
          "start" : 1716308597201,
          "stop" : 1716308597538,
          "duration" : 337
        }
      }, {
        "uid" : "82d8eb7fca1d8e47",
        "status" : "passed",
        "time" : {
          "start" : 1716279824857,
          "stop" : 1716279825170,
          "duration" : 313
        }
      }, {
        "uid" : "83701a5691474d1e",
        "status" : "passed",
        "time" : {
          "start" : 1716254299730,
          "stop" : 1716254300102,
          "duration" : 372
        }
      }, {
        "uid" : "5c5b7e123f1ace34",
        "status" : "passed",
        "time" : {
          "start" : 1716222266733,
          "stop" : 1716222267821,
          "duration" : 1088
        }
      }, {
        "uid" : "d472160b5380555c",
        "status" : "passed",
        "time" : {
          "start" : 1716193444878,
          "stop" : 1716193445340,
          "duration" : 462
        }
      }, {
        "uid" : "e1c297303cd7662b",
        "status" : "passed",
        "time" : {
          "start" : 1716167942938,
          "stop" : 1716167943787,
          "duration" : 849
        }
      }, {
        "uid" : "77a9f96930cb9d7c",
        "status" : "passed",
        "time" : {
          "start" : 1716136338848,
          "stop" : 1716136339276,
          "duration" : 428
        }
      }, {
        "uid" : "d31f7e6bc27cd218",
        "status" : "passed",
        "time" : {
          "start" : 1716107491088,
          "stop" : 1716107491486,
          "duration" : 398
        }
      }, {
        "uid" : "7897381c6fe56e0b",
        "status" : "passed",
        "time" : {
          "start" : 1716082362182,
          "stop" : 1716082362514,
          "duration" : 332
        }
      }, {
        "uid" : "f24fccccc545b03",
        "status" : "passed",
        "time" : {
          "start" : 1716049334735,
          "stop" : 1716049335641,
          "duration" : 906
        }
      }, {
        "uid" : "9cf75c873ae51533",
        "status" : "passed",
        "time" : {
          "start" : 1716020497946,
          "stop" : 1716020498286,
          "duration" : 340
        }
      }, {
        "uid" : "c30a87c5baea882f",
        "status" : "passed",
        "time" : {
          "start" : 1715995046997,
          "stop" : 1715995048200,
          "duration" : 1203
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "90b12cebbf69f85f.json",
  "parameterValues" : [ ]
}