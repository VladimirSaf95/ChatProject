{
  "uid" : "30668473bf801f4d",
  "name" : "test_send_gif",
  "fullName" : "test.test_messages_functionality#test_send_gif",
  "historyId" : "e2c73fa8c2349ddfce495417c4df003c",
  "time" : {
    "start" : 1716798246730,
    "stop" : 1716798247174,
    "duration" : 444
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7fd5c21039a0>\n\n    @allure.feature(\"Sending GIFs\")\n    @allure.story(\"Sending GIF in Chat\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_gif(api_client):\n        data = {\n            \"msgtype\": \"m.gif\",\n            \"format\": \"org.matrix.custom.html\",\n            \"senderId\": f\"@{api_client.senderid}:{api_client.room_second_part}\",\n            \"body\": \"{\\\"type\\\":\\\"GIF\\\",\\\"imgUrl\\\":\\\"https://media.tenor.com/2w1XsfvQD5kAAAAM/hhgf.gif\\\"}\"\n        }\n    \n        with allure.step(\"Sending GIF message\"):\n            response = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.room.message\",\n                                              json=data)\n    \n        with allure.step(\"Asserting response status code\"):\n>           assert response.status_code == 200, \"Response status code is not 200\"\nE           AssertionError: Response status code is not 200\nE           assert 500 == 200\nE            +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:204: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init_authorization",
    "time" : {
      "start" : 1716798193817,
      "stop" : 1716798195785,
      "duration" : 1968
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1716798193817,
      "stop" : 1716798193817,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "api_client",
    "time" : {
      "start" : 1716798195785,
      "stop" : 1716798195785,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7fd5c21039a0>\n\n    @allure.feature(\"Sending GIFs\")\n    @allure.story(\"Sending GIF in Chat\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_gif(api_client):\n        data = {\n            \"msgtype\": \"m.gif\",\n            \"format\": \"org.matrix.custom.html\",\n            \"senderId\": f\"@{api_client.senderid}:{api_client.room_second_part}\",\n            \"body\": \"{\\\"type\\\":\\\"GIF\\\",\\\"imgUrl\\\":\\\"https://media.tenor.com/2w1XsfvQD5kAAAAM/hhgf.gif\\\"}\"\n        }\n    \n        with allure.step(\"Sending GIF message\"):\n            response = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.room.message\",\n                                              json=data)\n    \n        with allure.step(\"Asserting response status code\"):\n>           assert response.status_code == 200, \"Response status code is not 200\"\nE           AssertionError: Response status code is not 200\nE           assert 500 == 200\nE            +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:204: AssertionError",
    "steps" : [ {
      "name" : "Sending GIF message",
      "time" : {
        "start" : 1716798246730,
        "stop" : 1716798247173,
        "duration" : 443
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Asserting response status code",
      "time" : {
        "start" : 1716798247173,
        "stop" : 1716798247173,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 204, in test_send_gif\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1716798251521,
      "stop" : 1716798251521,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "feature",
    "value" : "Sending GIFs"
  }, {
    "name" : "story",
    "value" : "Sending GIF in Chat"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "9b864710abbd"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 12,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 165,
        "unknown" : 0,
        "total" : 181
      },
      "items" : [ {
        "uid" : "141e6f0edbfd1d63",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716772784614,
          "stop" : 1716772785044,
          "duration" : 430
        }
      }, {
        "uid" : "51d09a9837e2fa1c",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716741150804,
          "stop" : 1716741151324,
          "duration" : 520
        }
      }, {
        "uid" : "c14a215136b87e8b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716711754815,
          "stop" : 1716711755493,
          "duration" : 678
        }
      }, {
        "uid" : "ad62380b8661652d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716686649801,
          "stop" : 1716686650473,
          "duration" : 672
        }
      }, {
        "uid" : "54a996aa6322e0a0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716654100205,
          "stop" : 1716654100442,
          "duration" : 237
        }
      }, {
        "uid" : "ade4c55885af299",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716625389769,
          "stop" : 1716625390466,
          "duration" : 697
        }
      }, {
        "uid" : "ea7567c45900ded9",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716599834740,
          "stop" : 1716599835251,
          "duration" : 511
        }
      }, {
        "uid" : "c110ee95048d7919",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716567739193,
          "stop" : 1716567739719,
          "duration" : 526
        }
      }, {
        "uid" : "7cd65688586961a8",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716539027905,
          "stop" : 1716539028133,
          "duration" : 228
        }
      }, {
        "uid" : "8c0109224a068404",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716513522564,
          "stop" : 1716513523083,
          "duration" : 519
        }
      }, {
        "uid" : "9c9f8fbd003bcf59",
        "status" : "passed",
        "time" : {
          "start" : 1716481520647,
          "stop" : 1716481521581,
          "duration" : 934
        }
      }, {
        "uid" : "373e17fceff844ca",
        "status" : "passed",
        "time" : {
          "start" : 1716452598816,
          "stop" : 1716452599472,
          "duration" : 656
        }
      }, {
        "uid" : "be25cfa03e4d3120",
        "status" : "passed",
        "time" : {
          "start" : 1716427084339,
          "stop" : 1716427085088,
          "duration" : 749
        }
      }, {
        "uid" : "2b9e0ebe8a7355a1",
        "status" : "passed",
        "time" : {
          "start" : 1716395151948,
          "stop" : 1716395152713,
          "duration" : 765
        }
      }, {
        "uid" : "48518d74e01f4cf2",
        "status" : "passed",
        "time" : {
          "start" : 1716366287102,
          "stop" : 1716366287781,
          "duration" : 679
        }
      }, {
        "uid" : "b01dd3a8d7e3af35",
        "status" : "passed",
        "time" : {
          "start" : 1716340729479,
          "stop" : 1716340730140,
          "duration" : 661
        }
      }, {
        "uid" : "546baa184363901f",
        "status" : "passed",
        "time" : {
          "start" : 1716308595873,
          "stop" : 1716308596632,
          "duration" : 759
        }
      }, {
        "uid" : "6637571a67d377a9",
        "status" : "passed",
        "time" : {
          "start" : 1716279823588,
          "stop" : 1716279824366,
          "duration" : 778
        }
      }, {
        "uid" : "d0dfd83daba964d4",
        "status" : "passed",
        "time" : {
          "start" : 1716254298323,
          "stop" : 1716254298785,
          "duration" : 462
        }
      }, {
        "uid" : "477f81c57477e573",
        "status" : "passed",
        "time" : {
          "start" : 1716222265160,
          "stop" : 1716222265920,
          "duration" : 760
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "30668473bf801f4d.json",
  "parameterValues" : [ ]
}