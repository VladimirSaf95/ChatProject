{
  "uid" : "5f4d10e95a7b3af4",
  "name" : "test_get_chanel",
  "fullName" : "test.test_get_chanel#test_get_chanel",
  "historyId" : "84e91ba442c690feffdfef2b3a65d80f",
  "time" : {
    "start" : 1716686644208,
    "stop" : 1716686644503,
    "duration" : 295
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f6226659670>\n\n    @allure.feature(\"Channel Operations\")\n    @allure.story(\"Checking Channel Retrieval\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_chanel(api_client):\n        with allure.step(\"Sending GET request for channels\"):\n            # Отправка GET-запроса\n            response = api_client.get(f\"{api_client.roomA}:{api_client.room_second_part}/state/m.room.power_levels?roomId={api_client.roomA}%3A{api_client.room_second_part}\")\n    \n            with allure.step(\"Asserting response status code\"):\n                # Проверка кода состояния\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_get_chanel.py:22: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init_authorization",
    "time" : {
      "start" : 1716686594249,
      "stop" : 1716686598261,
      "duration" : 4012
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_client",
    "time" : {
      "start" : 1716686598261,
      "stop" : 1716686598261,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1716686594248,
      "stop" : 1716686594248,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f6226659670>\n\n    @allure.feature(\"Channel Operations\")\n    @allure.story(\"Checking Channel Retrieval\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_chanel(api_client):\n        with allure.step(\"Sending GET request for channels\"):\n            # Отправка GET-запроса\n            response = api_client.get(f\"{api_client.roomA}:{api_client.room_second_part}/state/m.room.power_levels?roomId={api_client.roomA}%3A{api_client.room_second_part}\")\n    \n            with allure.step(\"Asserting response status code\"):\n                # Проверка кода состояния\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_get_chanel.py:22: AssertionError",
    "steps" : [ {
      "name" : "Sending GET request for channels",
      "time" : {
        "start" : 1716686644208,
        "stop" : 1716686644503,
        "duration" : 295
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_get_chanel.py\", line 22, in test_get_chanel\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ {
        "name" : "Asserting response status code",
        "time" : {
          "start" : 1716686644502,
          "stop" : 1716686644503,
          "duration" : 1
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
        "statusTrace" : "  File \"/usr/workspace/test/test_get_chanel.py\", line 22, in test_get_chanel\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1716686655807,
      "stop" : 1716686655807,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Checking Channel Retrieval"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "Channel Operations"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_get_chanel"
  }, {
    "name" : "host",
    "value" : "eda0dbb8bd7b"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_get_chanel"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 8,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 165,
        "unknown" : 0,
        "total" : 177
      },
      "items" : [ {
        "uid" : "cdfa81f465fa3abe",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716654093262,
          "stop" : 1716654093928,
          "duration" : 666
        }
      }, {
        "uid" : "9f8af4f6a46d874b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716625384566,
          "stop" : 1716625384808,
          "duration" : 242
        }
      }, {
        "uid" : "2f321aa675511f7b",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716599829314,
          "stop" : 1716599829555,
          "duration" : 241
        }
      }, {
        "uid" : "803196cae80d7795",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716567733763,
          "stop" : 1716567734294,
          "duration" : 531
        }
      }, {
        "uid" : "92f13043af184d1f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716539021809,
          "stop" : 1716539022052,
          "duration" : 243
        }
      }, {
        "uid" : "5d3682bebad2d5d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1716513515922,
          "stop" : 1716513516127,
          "duration" : 205
        }
      }, {
        "uid" : "b7fe73524283a977",
        "status" : "passed",
        "time" : {
          "start" : 1716481514000,
          "stop" : 1716481514255,
          "duration" : 255
        }
      }, {
        "uid" : "29502be1491a066a",
        "status" : "passed",
        "time" : {
          "start" : 1716452593954,
          "stop" : 1716452594230,
          "duration" : 276
        }
      }, {
        "uid" : "f591ec9061b812e5",
        "status" : "passed",
        "time" : {
          "start" : 1716427078942,
          "stop" : 1716427079126,
          "duration" : 184
        }
      }, {
        "uid" : "fe31882db5ef13b9",
        "status" : "passed",
        "time" : {
          "start" : 1716395144332,
          "stop" : 1716395144641,
          "duration" : 309
        }
      }, {
        "uid" : "bc90cc3a476124b4",
        "status" : "passed",
        "time" : {
          "start" : 1716366281507,
          "stop" : 1716366281681,
          "duration" : 174
        }
      }, {
        "uid" : "3beaa16a03cc4e29",
        "status" : "passed",
        "time" : {
          "start" : 1716340724647,
          "stop" : 1716340724836,
          "duration" : 189
        }
      }, {
        "uid" : "a26639c97f61ba63",
        "status" : "passed",
        "time" : {
          "start" : 1716308590348,
          "stop" : 1716308590609,
          "duration" : 261
        }
      }, {
        "uid" : "70a7e648817406ce",
        "status" : "passed",
        "time" : {
          "start" : 1716279817947,
          "stop" : 1716279818153,
          "duration" : 206
        }
      }, {
        "uid" : "4fb550faec7ff20f",
        "status" : "passed",
        "time" : {
          "start" : 1716254291731,
          "stop" : 1716254291979,
          "duration" : 248
        }
      }, {
        "uid" : "b6782734a29ebc82",
        "status" : "passed",
        "time" : {
          "start" : 1716222259635,
          "stop" : 1716222259851,
          "duration" : 216
        }
      }, {
        "uid" : "6d953ede8d8dc595",
        "status" : "passed",
        "time" : {
          "start" : 1716193436435,
          "stop" : 1716193436694,
          "duration" : 259
        }
      }, {
        "uid" : "36e72e95e22c1ec1",
        "status" : "passed",
        "time" : {
          "start" : 1716167934118,
          "stop" : 1716167934349,
          "duration" : 231
        }
      }, {
        "uid" : "bf44d814114aec77",
        "status" : "passed",
        "time" : {
          "start" : 1716136326860,
          "stop" : 1716136327605,
          "duration" : 745
        }
      }, {
        "uid" : "6136d26112cb4c22",
        "status" : "passed",
        "time" : {
          "start" : 1716107483913,
          "stop" : 1716107484425,
          "duration" : 512
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "5f4d10e95a7b3af4.json",
  "parameterValues" : [ ]
}