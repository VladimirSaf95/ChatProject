{
  "uid" : "4cb26329537c27b3",
  "name" : "test_send_reaction",
  "fullName" : "test.test_messages_functionality#test_send_reaction",
  "historyId" : "c97f0dca0399de29e1f93fc1150eb31b",
  "time" : {
    "start" : 1719019266807,
    "stop" : 1719019268998,
    "duration" : 2191
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7fa338c23640>\n\n    @allure.feature(\"Reaction to Message\")\n    @allure.story(\"Setting reaction\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_reaction(api_client):\n        with allure.step(\"Setting reaction on message\"):\n            event_id = os.environ.get(\"EVENT_ID_A\")\n            if event_id is None:\n                responseA = api_client.sendmessages(response_b=False)\n                event_id = os.environ.get(\"EVENT_ID_A\")\n    \n            data = {\n                \"m.relates_to\": {\n                    \"event_id\": event_id,\n                    \"key\": \"\uD83D\uDC4D\",\n                    \"rel_type\": \"m.annotation\"\n                }\n            }\n    \n            response = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.reaction\",\n                                              json=data)\n    \n            with allure.step(\"Check response code\"):\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:93: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "api_client",
    "time" : {
      "start" : 1719019209948,
      "stop" : 1719019209948,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1719019145820,
      "stop" : 1719019145820,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "init_authorization",
    "time" : {
      "start" : 1719019145820,
      "stop" : 1719019209947,
      "duration" : 64127
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7fa338c23640>\n\n    @allure.feature(\"Reaction to Message\")\n    @allure.story(\"Setting reaction\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_send_reaction(api_client):\n        with allure.step(\"Setting reaction on message\"):\n            event_id = os.environ.get(\"EVENT_ID_A\")\n            if event_id is None:\n                responseA = api_client.sendmessages(response_b=False)\n                event_id = os.environ.get(\"EVENT_ID_A\")\n    \n            data = {\n                \"m.relates_to\": {\n                    \"event_id\": event_id,\n                    \"key\": \"\uD83D\uDC4D\",\n                    \"rel_type\": \"m.annotation\"\n                }\n            }\n    \n            response = api_client.post_token1(f\"{api_client.roomA}%3A{api_client.room_second_part}/send/m.reaction\",\n                                              json=data)\n    \n            with allure.step(\"Check response code\"):\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_messages_functionality.py:93: AssertionError",
    "steps" : [ {
      "name" : "Setting reaction on message",
      "time" : {
        "start" : 1719019266807,
        "stop" : 1719019268998,
        "duration" : 2191
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 93, in test_send_reaction\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ {
        "name" : "Check response code",
        "time" : {
          "start" : 1719019268998,
          "stop" : 1719019268998,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
        "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 93, in test_send_reaction\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1719019349653,
      "stop" : 1719019349653,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Reaction to Message"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "story",
    "value" : "Setting reaction"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "21851eb13c55"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 15,
        "skipped" : 0,
        "passed" : 240,
        "unknown" : 0,
        "total" : 257
      },
      "items" : [ {
        "uid" : "28fcb178d58d3657",
        "status" : "passed",
        "time" : {
          "start" : 1718987013857,
          "stop" : 1718987014642,
          "duration" : 785
        }
      }, {
        "uid" : "e0b5360232d6fe82",
        "status" : "passed",
        "time" : {
          "start" : 1718958824962,
          "stop" : 1718958825526,
          "duration" : 564
        }
      }, {
        "uid" : "2aad471837ff4c2e",
        "status" : "passed",
        "time" : {
          "start" : 1718932838435,
          "stop" : 1718932838764,
          "duration" : 329
        }
      }, {
        "uid" : "6d8024aa719eb742",
        "status" : "passed",
        "time" : {
          "start" : 1718900780104,
          "stop" : 1718900780437,
          "duration" : 333
        }
      }, {
        "uid" : "cf3c4f497a493416",
        "status" : "passed",
        "time" : {
          "start" : 1718871898391,
          "stop" : 1718871898842,
          "duration" : 451
        }
      }, {
        "uid" : "4db7349987deb416",
        "status" : "passed",
        "time" : {
          "start" : 1718846405739,
          "stop" : 1718846406101,
          "duration" : 362
        }
      }, {
        "uid" : "d6e153f54cfbc01b",
        "status" : "passed",
        "time" : {
          "start" : 1718814831779,
          "stop" : 1718814832661,
          "duration" : 882
        }
      }, {
        "uid" : "4d484ad1d49b66c4",
        "status" : "passed",
        "time" : {
          "start" : 1718785493357,
          "stop" : 1718785493834,
          "duration" : 477
        }
      }, {
        "uid" : "33361bfece5e6c86",
        "status" : "passed",
        "time" : {
          "start" : 1718760123503,
          "stop" : 1718760123814,
          "duration" : 311
        }
      }, {
        "uid" : "97aa4ddc7f8b5036",
        "status" : "passed",
        "time" : {
          "start" : 1718727894763,
          "stop" : 1718727895069,
          "duration" : 306
        }
      }, {
        "uid" : "832fdcac265bcf22",
        "status" : "passed",
        "time" : {
          "start" : 1718699691742,
          "stop" : 1718699692491,
          "duration" : 749
        }
      }, {
        "uid" : "2c779ee557caf00d",
        "status" : "passed",
        "time" : {
          "start" : 1718673708489,
          "stop" : 1718673708748,
          "duration" : 259
        }
      }, {
        "uid" : "ec0e1d6709ba8c06",
        "status" : "passed",
        "time" : {
          "start" : 1718642074001,
          "stop" : 1718642074615,
          "duration" : 614
        }
      }, {
        "uid" : "5f3948fa6678aab9",
        "status" : "passed",
        "time" : {
          "start" : 1718612712598,
          "stop" : 1718612712896,
          "duration" : 298
        }
      }, {
        "uid" : "13a39cd714f71b1b",
        "status" : "passed",
        "time" : {
          "start" : 1718587439390,
          "stop" : 1718587439713,
          "duration" : 323
        }
      }, {
        "uid" : "d02bf09bbf54ba67",
        "status" : "passed",
        "time" : {
          "start" : 1718555531469,
          "stop" : 1718555532255,
          "duration" : 786
        }
      }, {
        "uid" : "8b78a199e74b9c87",
        "status" : "passed",
        "time" : {
          "start" : 1718526153965,
          "stop" : 1718526154335,
          "duration" : 370
        }
      }, {
        "uid" : "4054ea78b0f0fdba",
        "status" : "passed",
        "time" : {
          "start" : 1718501226470,
          "stop" : 1718501226755,
          "duration" : 285
        }
      }, {
        "uid" : "90f7875826ca0fdb",
        "status" : "passed",
        "time" : {
          "start" : 1718468636493,
          "stop" : 1718468636779,
          "duration" : 286
        }
      }, {
        "uid" : "28f681abc4beb8f1",
        "status" : "passed",
        "time" : {
          "start" : 1718439774957,
          "stop" : 1718439775250,
          "duration" : 293
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "4cb26329537c27b3.json",
  "parameterValues" : [ ]
}