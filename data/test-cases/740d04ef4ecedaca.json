{
  "uid" : "740d04ef4ecedaca",
  "name" : "test_send_complaint",
  "fullName" : "test.test_messages_functionality#test_send_complaint",
  "historyId" : "31f8786fe3f6ff4b035b30b6ade7469c",
  "time" : {
    "start" : 1716741151335,
    "stop" : 1716741152250,
    "duration" : 915
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.9/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f1316f1af10>\ns = '<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"robots\" content=\"noindex,nofollow,noar....\\n        We will fix it as soon as possible. Sorry for any inconvenience caused.\\n    </p>\\n</div>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\napi_client = <fixture.api_client.APIClient object at 0x7f1315e224c0>\n\n    @allure.feature(\"Sending Complaints\")\n    @allure.story(\"Filing Complaint on Message\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_send_complaint(api_client):\n        event_id = os.environ.get(\"EVENT_ID_A\")\n        if event_id is None:\n>           responseA = api_client.sendmessages(response_b=False)\n\ntest/test_messages_functionality.py:225: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixture/api_client.py:74: in sendmessages\n    responseA_json, responseB_json = responseA.json(), responseB.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init_authorization",
    "time" : {
      "start" : 1716740522125,
      "stop" : 1716740524559,
      "duration" : 2434
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1716740522125,
      "stop" : 1716740522125,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_client",
    "time" : {
      "start" : 1716740524559,
      "stop" : 1716740524559,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1716741154577,
      "stop" : 1716741154577,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Filing Complaint on Message"
  }, {
    "name" : "feature",
    "value" : "Sending Complaints"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "70dcc47859d6"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 13,
        "skipped" : 0,
        "passed" : 165,
        "unknown" : 0,
        "total" : 179
      },
      "items" : [ {
        "uid" : "84eaece0bc1f3c90",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716711755503,
          "stop" : 1716711756304,
          "duration" : 801
        }
      }, {
        "uid" : "34d76d881d46efaf",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716686650483,
          "stop" : 1716686651802,
          "duration" : 1319
        }
      }, {
        "uid" : "b1cb3d63cf9a08bc",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716654100451,
          "stop" : 1716654101304,
          "duration" : 853
        }
      }, {
        "uid" : "2f48c1bbd9daf3fd",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716625390475,
          "stop" : 1716625391286,
          "duration" : 811
        }
      }, {
        "uid" : "5f54d1dbb9e532f5",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716599835260,
          "stop" : 1716599835865,
          "duration" : 605
        }
      }, {
        "uid" : "cb0c28e4788c9544",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716567739728,
          "stop" : 1716567740681,
          "duration" : 953
        }
      }, {
        "uid" : "a3c7c3a48d49725e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716539028142,
          "stop" : 1716539028936,
          "duration" : 794
        }
      }, {
        "uid" : "84047e9b12686a27",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1716513523092,
          "stop" : 1716513524018,
          "duration" : 926
        }
      }, {
        "uid" : "34e074ecfb08cec4",
        "status" : "passed",
        "time" : {
          "start" : 1716481521583,
          "stop" : 1716481522152,
          "duration" : 569
        }
      }, {
        "uid" : "66e7a7f384c9099f",
        "status" : "passed",
        "time" : {
          "start" : 1716452599474,
          "stop" : 1716452600267,
          "duration" : 793
        }
      }, {
        "uid" : "7eaba555a259c607",
        "status" : "passed",
        "time" : {
          "start" : 1716427085089,
          "stop" : 1716427085610,
          "duration" : 521
        }
      }, {
        "uid" : "dff8fc2c3fcd490d",
        "status" : "passed",
        "time" : {
          "start" : 1716395152715,
          "stop" : 1716395153719,
          "duration" : 1004
        }
      }, {
        "uid" : "7ec5481a7c0097fa",
        "status" : "passed",
        "time" : {
          "start" : 1716366287783,
          "stop" : 1716366288433,
          "duration" : 650
        }
      }, {
        "uid" : "e5aa12e383c5219f",
        "status" : "passed",
        "time" : {
          "start" : 1716340730142,
          "stop" : 1716340730821,
          "duration" : 679
        }
      }, {
        "uid" : "267bdce9624cce4c",
        "status" : "passed",
        "time" : {
          "start" : 1716308596634,
          "stop" : 1716308597199,
          "duration" : 565
        }
      }, {
        "uid" : "57e4129ac937fd8f",
        "status" : "passed",
        "time" : {
          "start" : 1716279824368,
          "stop" : 1716279824855,
          "duration" : 487
        }
      }, {
        "uid" : "7e66a9779fdb57ea",
        "status" : "passed",
        "time" : {
          "start" : 1716254298787,
          "stop" : 1716254299728,
          "duration" : 941
        }
      }, {
        "uid" : "8701858ae8200bea",
        "status" : "passed",
        "time" : {
          "start" : 1716222265922,
          "stop" : 1716222266731,
          "duration" : 809
        }
      }, {
        "uid" : "6f51c679340dd4cc",
        "status" : "passed",
        "time" : {
          "start" : 1716193443810,
          "stop" : 1716193444876,
          "duration" : 1066
        }
      }, {
        "uid" : "2bda1ede08c645a0",
        "status" : "passed",
        "time" : {
          "start" : 1716167941956,
          "stop" : 1716167942936,
          "duration" : 980
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "740d04ef4ecedaca.json",
  "parameterValues" : [ ]
}