{
  "uid" : "a8ff1ce449734d2a",
  "name" : "test_delete_dmsg",
  "fullName" : "test.test_messages_functionality#test_delete_dmsg",
  "historyId" : "f19e9c8f1ee94d8815bdda0bfa138b0a",
  "time" : {
    "start" : 1718958839357,
    "stop" : 1718958899489,
    "duration" : 60132
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f10ee1d8c40>\n\n    @allure.feature(\"Message Operations\")\n    @allure.story(\"Deleting Messages\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_delete_dmsg(api_client):\n        with allure.step(\"Checking if event_id is available\"):\n            event_id = os.environ.get(\"EVENT_ID_B\")\n    \n            # Проверка, что event_id был получен в предыдущем тесте\n            if event_id is None:\n                api_client.sendmessages(response_a=False)\n                event_id = os.environ.get(\"EVENT_ID_B\")\n    \n        with allure.step(\"Sending DELETE request to delete message\"):\n            response = api_client.delete_token_s(f\"api/v1/synapse/message/{api_client.roomB}%3A{api_client.room_second_part}/{event_id}\")\n    \n            with allure.step(\"Asserting response status code\"):\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 504 == 200\nE                +  where 504 = <Response [504]>.status_code\n\ntest/test_messages_functionality.py:323: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init_authorization",
    "time" : {
      "start" : 1718958185854,
      "stop" : 1718958188509,
      "duration" : 2655
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1718958185854,
      "stop" : 1718958185854,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "api_client",
    "time" : {
      "start" : 1718958188510,
      "stop" : 1718958188510,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f10ee1d8c40>\n\n    @allure.feature(\"Message Operations\")\n    @allure.story(\"Deleting Messages\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_delete_dmsg(api_client):\n        with allure.step(\"Checking if event_id is available\"):\n            event_id = os.environ.get(\"EVENT_ID_B\")\n    \n            # Проверка, что event_id был получен в предыдущем тесте\n            if event_id is None:\n                api_client.sendmessages(response_a=False)\n                event_id = os.environ.get(\"EVENT_ID_B\")\n    \n        with allure.step(\"Sending DELETE request to delete message\"):\n            response = api_client.delete_token_s(f\"api/v1/synapse/message/{api_client.roomB}%3A{api_client.room_second_part}/{event_id}\")\n    \n            with allure.step(\"Asserting response status code\"):\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 504 == 200\nE                +  where 504 = <Response [504]>.status_code\n\ntest/test_messages_functionality.py:323: AssertionError",
    "steps" : [ {
      "name" : "Checking if event_id is available",
      "time" : {
        "start" : 1718958839357,
        "stop" : 1718958839357,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Sending DELETE request to delete message",
      "time" : {
        "start" : 1718958839357,
        "stop" : 1718958899489,
        "duration" : 60132
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 323, in test_delete_dmsg\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ {
        "name" : "Asserting response status code",
        "time" : {
          "start" : 1718958899489,
          "stop" : 1718958899489,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code\n",
        "statusTrace" : "  File \"/usr/workspace/test/test_messages_functionality.py\", line 323, in test_delete_dmsg\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1718958899701,
      "stop" : 1718958899701,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "Deleting Messages"
  }, {
    "name" : "feature",
    "value" : "Message Operations"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_messages_functionality"
  }, {
    "name" : "host",
    "value" : "f7db1f4682ac"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_messages_functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 240,
        "broken" : 15,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 255
      },
      "items" : [ {
        "uid" : "c53bf5c051c12570",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718932852778,
          "stop" : 1718932912958,
          "duration" : 60180
        }
      }, {
        "uid" : "eed2ec757b6d2dd5",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718900794485,
          "stop" : 1718900854624,
          "duration" : 60139
        }
      }, {
        "uid" : "9065f8982335d7d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718871914103,
          "stop" : 1718871974240,
          "duration" : 60137
        }
      }, {
        "uid" : "ef99905065dc5be1",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718846419973,
          "stop" : 1718846480111,
          "duration" : 60138
        }
      }, {
        "uid" : "df6f493d47af87fe",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718814847138,
          "stop" : 1718814907319,
          "duration" : 60181
        }
      }, {
        "uid" : "9d14bf3efbeee67f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718785510152,
          "stop" : 1718785570341,
          "duration" : 60189
        }
      }, {
        "uid" : "c6389d81bb4ea918",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718760137590,
          "stop" : 1718760197738,
          "duration" : 60148
        }
      }, {
        "uid" : "eb4cc2f7237effc6",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718727909038,
          "stop" : 1718727969166,
          "duration" : 60128
        }
      }, {
        "uid" : "5adacc8b72e5899f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718699707271,
          "stop" : 1718699767457,
          "duration" : 60186
        }
      }, {
        "uid" : "f3084094002e2574",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718673723236,
          "stop" : 1718673783398,
          "duration" : 60162
        }
      }, {
        "uid" : "9b84a9aca074d06",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718642089061,
          "stop" : 1718642149212,
          "duration" : 60151
        }
      }, {
        "uid" : "8618dc8b314f6076",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718612726409,
          "stop" : 1718612786540,
          "duration" : 60131
        }
      }, {
        "uid" : "d88a18f739aae54d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718587454553,
          "stop" : 1718587514738,
          "duration" : 60185
        }
      }, {
        "uid" : "78b263b37b260b1a",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718555546776,
          "stop" : 1718555606963,
          "duration" : 60187
        }
      }, {
        "uid" : "66e04a73c20921fe",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718526168959,
          "stop" : 1718526229097,
          "duration" : 60138
        }
      }, {
        "uid" : "459d84d6694e4179",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718501240712,
          "stop" : 1718501300849,
          "duration" : 60137
        }
      }, {
        "uid" : "9b1c22b9c75f1fe5",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718468650454,
          "stop" : 1718468710568,
          "duration" : 60114
        }
      }, {
        "uid" : "9e212bf22740539f",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718439789181,
          "stop" : 1718439849314,
          "duration" : 60133
        }
      }, {
        "uid" : "fc16f7fe07344e61",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718415054497,
          "stop" : 1718415114675,
          "duration" : 60178
        }
      }, {
        "uid" : "53ceaab2e8801f9d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 504 == 200\n +  where 504 = <Response [504]>.status_code",
        "time" : {
          "start" : 1718382236813,
          "stop" : 1718382296956,
          "duration" : 60143
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "a8ff1ce449734d2a.json",
  "parameterValues" : [ ]
}