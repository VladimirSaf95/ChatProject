{
  "uid" : "2843c009d4fbfd3c",
  "name" : "test_get_chanel",
  "fullName" : "test.test_get_chanel#test_get_chanel",
  "historyId" : "84e91ba442c690feffdfef2b3a65d80f",
  "time" : {
    "start" : 1719937620225,
    "stop" : 1719937620927,
    "duration" : 702
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
  "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f6b997756a0>\n\n    @allure.feature(\"Channel Operations\")\n    @allure.story(\"Checking Channel Retrieval\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_chanel(api_client):\n        with allure.step(\"Sending GET request for channels\"):\n            # Отправка GET-запроса\n            response = api_client.get(f\"{api_client.roomA}:{api_client.room_second_part}/state/m.room.power_levels?roomId={api_client.roomA}%3A{api_client.room_second_part}\")\n    \n            with allure.step(\"Asserting response status code\"):\n                # Проверка кода состояния\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_get_chanel.py:22: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "api_client",
    "time" : {
      "start" : 1719937511554,
      "stop" : 1719937511554,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1719937508362,
      "stop" : 1719937508362,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "init_authorization",
    "time" : {
      "start" : 1719937508362,
      "stop" : 1719937511554,
      "duration" : 3192
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
    "statusTrace" : "api_client = <fixture.api_client.APIClient object at 0x7f6b997756a0>\n\n    @allure.feature(\"Channel Operations\")\n    @allure.story(\"Checking Channel Retrieval\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_get_chanel(api_client):\n        with allure.step(\"Sending GET request for channels\"):\n            # Отправка GET-запроса\n            response = api_client.get(f\"{api_client.roomA}:{api_client.room_second_part}/state/m.room.power_levels?roomId={api_client.roomA}%3A{api_client.room_second_part}\")\n    \n            with allure.step(\"Asserting response status code\"):\n                # Проверка кода состояния\n>               assert response.status_code == 200, \"Response status code is not 200\"\nE               AssertionError: Response status code is not 200\nE               assert 500 == 200\nE                +  where 500 = <Response [500]>.status_code\n\ntest/test_get_chanel.py:22: AssertionError",
    "steps" : [ {
      "name" : "Sending GET request for channels",
      "time" : {
        "start" : 1719937620225,
        "stop" : 1719937620927,
        "duration" : 702
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
      "statusTrace" : "  File \"/usr/workspace/test/test_get_chanel.py\", line 22, in test_get_chanel\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
      "steps" : [ {
        "name" : "Asserting response status code",
        "time" : {
          "start" : 1719937620926,
          "stop" : 1719937620926,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code\n",
        "statusTrace" : "  File \"/usr/workspace/test/test_get_chanel.py\", line 22, in test_get_chanel\n    assert response.status_code == 200, \"Response status code is not 200\"\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_client::0",
    "time" : {
      "start" : 1719937648647,
      "stop" : 1719937648647,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Checking Channel Retrieval"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "Channel Operations"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_get_chanel"
  }, {
    "name" : "host",
    "value" : "99f5e786f03f"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_get_chanel"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 14,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 251,
        "unknown" : 0,
        "total" : 269
      },
      "items" : [ {
        "uid" : "6f4f46fe49431bb3",
        "status" : "passed",
        "time" : {
          "start" : 1719908680200,
          "stop" : 1719908680418,
          "duration" : 218
        }
      }, {
        "uid" : "90d9ac8f422e14b2",
        "status" : "passed",
        "time" : {
          "start" : 1719883347093,
          "stop" : 1719883347336,
          "duration" : 243
        }
      }, {
        "uid" : "8c74fce64da1d23a",
        "status" : "passed",
        "time" : {
          "start" : 1719851048378,
          "stop" : 1719851048930,
          "duration" : 552
        }
      }, {
        "uid" : "4f5b983a832a6754",
        "status" : "passed",
        "time" : {
          "start" : 1719822369213,
          "stop" : 1719822369781,
          "duration" : 568
        }
      }, {
        "uid" : "f5e9e24a4ad9f052",
        "status" : "passed",
        "time" : {
          "start" : 1719218110819,
          "stop" : 1719218111321,
          "duration" : 502
        }
      }, {
        "uid" : "7fd608ade114de02",
        "status" : "passed",
        "time" : {
          "start" : 1719192155942,
          "stop" : 1719192156131,
          "duration" : 189
        }
      }, {
        "uid" : "13a2fcf37b70d478",
        "status" : "passed",
        "time" : {
          "start" : 1719159762722,
          "stop" : 1719159762987,
          "duration" : 265
        }
      }, {
        "uid" : "5dc2c768d46cba0",
        "status" : "passed",
        "time" : {
          "start" : 1719130908997,
          "stop" : 1719130909184,
          "duration" : 187
        }
      }, {
        "uid" : "1e554a3d16ae49a5",
        "status" : "passed",
        "time" : {
          "start" : 1719105958652,
          "stop" : 1719105958849,
          "duration" : 197
        }
      }, {
        "uid" : "7904c71666922be7",
        "status" : "passed",
        "time" : {
          "start" : 1719073475321,
          "stop" : 1719073475537,
          "duration" : 216
        }
      }, {
        "uid" : "ebdd601b78c65e95",
        "status" : "passed",
        "time" : {
          "start" : 1719044592979,
          "stop" : 1719044593222,
          "duration" : 243
        }
      }, {
        "uid" : "43218326c03ec406",
        "status" : "failed",
        "statusDetails" : "AssertionError: Response status code is not 200\nassert 500 == 200\n +  where 500 = <Response [500]>.status_code",
        "time" : {
          "start" : 1719019262806,
          "stop" : 1719019263046,
          "duration" : 240
        }
      }, {
        "uid" : "10b581b4ce17eac6",
        "status" : "passed",
        "time" : {
          "start" : 1718987010285,
          "stop" : 1718987010515,
          "duration" : 230
        }
      }, {
        "uid" : "3514d519b910c2ef",
        "status" : "passed",
        "time" : {
          "start" : 1718958821589,
          "stop" : 1718958822057,
          "duration" : 468
        }
      }, {
        "uid" : "bde9a7b0bd4f4872",
        "status" : "passed",
        "time" : {
          "start" : 1718932833303,
          "stop" : 1718932833548,
          "duration" : 245
        }
      }, {
        "uid" : "e2270c34eb8df61a",
        "status" : "passed",
        "time" : {
          "start" : 1718900776818,
          "stop" : 1718900777037,
          "duration" : 219
        }
      }, {
        "uid" : "f3c7d4da4c9d62a6",
        "status" : "passed",
        "time" : {
          "start" : 1718871894365,
          "stop" : 1718871894626,
          "duration" : 261
        }
      }, {
        "uid" : "37a0f6f8841618ac",
        "status" : "passed",
        "time" : {
          "start" : 1718846402584,
          "stop" : 1718846402799,
          "duration" : 215
        }
      }, {
        "uid" : "770402bb773b1b50",
        "status" : "passed",
        "time" : {
          "start" : 1718814827124,
          "stop" : 1718814827877,
          "duration" : 753
        }
      }, {
        "uid" : "ddd6d5b917faa59f",
        "status" : "passed",
        "time" : {
          "start" : 1718785489679,
          "stop" : 1718785489975,
          "duration" : 296
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "2843c009d4fbfd3c.json",
  "parameterValues" : [ ]
}