import os
import time
from urllib.parse import quote
import json
import pytest

from fixture.api_client import APIClient


# ROOM A
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
def test_sendmessages(api_client):
    responseA, responseB = api_client.sendmessages()

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
    assert responseA.status_code == 200
    assert "The message is invalid" not in responseA.text
    assert responseB.status_code == 200
    assert "The message is invalid" not in responseB.text

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" in responseA.json(), "The key 'event_id' is not found in the JSON response"
    assert "event_id" in responseB.json(), "The key 'event_id' is not found in the JSON response"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –í —Å–ª—É—á–∞–µ –±–æ–ª—å—à–µ 3 —Å, —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω.
    duration_threshold = 5
    assert responseA.elapsed.total_seconds() <= duration_threshold
    assert responseB.elapsed.total_seconds() <= duration_threshold


# –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–æ–¥–∂–∏ –≤ —á–∞—Ç
def test_sendemoji(api_client):
    data = {"body": "üòÖ", "msgtype": "m.text", "senderId": f"@{api_client.senderid}:matrix.netreportservice.xyz"}

    response = api_client.post_token1(f"{api_client.roomA}%3Amatrix.netreportservice.xyz/send/m.room.message",
                                      json=data)

    assert response.status_code == 200
    assert "The message is invalid" not in response.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" in response.json(), "The key 'event_id' is not found in the JSON response"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –í —Å–ª—É—á–∞–µ –±–æ–ª—å—à–µ 3 —Å, —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω.
    duration_threshold = 5
    assert response.elapsed.total_seconds() <= duration_threshold


# –ü—Ä–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
def test_sendreaction(api_client):

    event_id = os.environ.get("EVENT_ID_A")
    if event_id is None:
        responseA = api_client.sendmessages(response_b=False)
        event_id = os.environ.get("EVENT_ID_A")

    data = {
        "m.relates_to": {
            "event_id": event_id,
            "key": "üëç",
            "rel_type": "m.annotation"
        }
    }

    response = api_client.post_token1(f"{api_client.roomA}%3Amatrix.netreportservice.xyz/send/m.reaction", json=data)

    assert response.status_code == 200
    assert "The message is invalid" not in response.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" in response.json(), "The key 'event_id' is not found in the JSON response"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –í —Å–ª—É—á–∞–µ –±–æ–ª—å—à–µ 3 —Å, —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω.
    duration_threshold = 5
    assert response.elapsed.total_seconds() <= duration_threshold


# –¢–µ–≥ –∏–≥—Ä–æ–∫–∞ –≤ —á–∞—Ç–µ token_2
def test_sendtaguser(api_client):
    data = {"body": "@test96 fff", "msgtype": "m.text",
            "senderId": f"@{api_client.senderid}:matrix.netreportservice.xyz"}

    response = api_client.post_token1(f"{api_client.roomA}%3Amatrix.netreportservice.xyz/send/m.room.message",
                                      json=data)

    assert response.status_code == 200
    assert "The message is invalid" not in response.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" in response.json(), "The key 'event_id' is not found in the JSON response"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –í —Å–ª—É—á–∞–µ –±–æ–ª—å—à–µ 3 —Å, —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω.
    duration_threshold = 5
    assert response.elapsed.total_seconds() <= duration_threshold


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ —É—Ä–ª–∞ –≤ —á–∞—Ç
def test_sendurl(api_client):
    data_url1 = {"body": "google.com", "msgtype": "m.text",
                 "senderId": f"@{api_client.senderid}:matrix.netreportservice.xyz"}
    data_url2 = {"body": "example.com", "msgtype": "m.text",
                 "senderId": "@97884aeb-3618-46e0-bb1f-eeed55db52f1:matrix.netreportservice.xyz"}

    response1 = api_client.post_token1(f"{api_client.roomA}%3Amatrix.netreportservice.xyz/send/m.room.message",
                                       json=data_url1)
    assert response1.status_code == 200
    assert "The message is invalid" not in response1.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" in response1.json(), "The key 'event_id' is not found in the JSON response"

    response2 = api_client.post_token1(f"{api_client.roomA}%3Amatrix.netreportservice.xyz/send/m.room.message",
                                       json=data_url2)
    assert response2.status_code == 200
    assert "The message is invalid" in response2.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" not in response2.json(), "The key 'event_id' is not found in the JSON response"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –í —Å–ª—É—á–∞–µ –±–æ–ª—å—à–µ 3 —Å, —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω.
    duration_threshold = 5
    assert response1.elapsed.total_seconds() <= duration_threshold
    assert response2.elapsed.total_seconds() <= duration_threshold


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —á–∞—Ç
def test_sendnotallowsymbol(api_client):
    data_url1 = {"body": "LOL", "msgtype": "m.text", "senderId": f"@{api_client.senderid}:matrix.netreportservice.xyz"}

    response = api_client.post_token1(f"{api_client.roomA}%3Amatrix.netreportservice.xyz/send/m.room.message",
                                      json=data_url1)
    assert response.status_code == 200
    assert "The message is invalid" in response.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" not in response.json(), "The key 'event_id' is not found in the JSON response"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –í —Å–ª—É—á–∞–µ –±–æ–ª—å—à–µ 3 —Å, —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω.
    duration_threshold = 5
    assert response.elapsed.total_seconds() <= duration_threshold


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏—Ñ–∫–∏ –≤ —á–∞—Ç
def test_sendgif(api_client):
    data = {
        "msgtype": "m.gif",
        "format": "org.matrix.custom.html",
        "senderId": f"@{api_client.senderid}:matrix.netreportservice.xyz",
        "body": "{\"type\":\"GIF\",\"imgUrl\":\"https://media.tenor.com/2w1XsfvQD5kAAAAM/hhgf.gif\"}"
    }

    response = api_client.post_token1(f"{api_client.roomA}%3Amatrix.netreportservice.xyz/send/m.room.message",
                                      json=data)

    assert response.status_code == 200
    error_message = "The message is invalid"
    assert error_message not in response.text, f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{error_message}'"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" in response.json(), "The key 'event_id' is not found in the JSON response"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –í —Å–ª—É—á–∞–µ –±–æ–ª—å—à–µ 3 —Å, —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω.
    duration_threshold = 5
    assert response.elapsed.total_seconds() <= duration_threshold



# –ü—Ä–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ test_sendmessages
def test_sendcomplaint(api_client):
    event_id = os.environ.get("EVENT_ID_A")
    if event_id is None:
        responseA = api_client.sendmessages(response_b=False)
        event_id = os.environ.get("EVENT_ID_A")

    data = {"eventUid": event_id, "channelUid": f"{api_client.roomA}%3Amatrix.netreportservice.xyz",
            "reason": "trolling"}

    response = api_client.post_token_s(f"api/v1/complaint/send/{api_client.xnodeid}", json=data)

    assert response.status_code == 200


# ROOM B
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
def test_pinnedmsg(api_client):
    event_id = os.environ.get("EVENT_ID_B")
    if event_id is None:
        responseB = api_client.sendmessages(response_a=False)
        event_id = os.environ.get("EVENT_ID_B")

    data = {"pinned": [{"messageId": event_id, "text": "Text Test"}]}

    response = api_client.post_token_adm(f"{api_client.roomB}%3Amatrix.netreportservice.xyz/send/m.room.pinned_events",
                                         json=data)
    response_json = response.json()
    event_id_pinmsg = response_json.get('event_id')

    if response.status_code == 200:
        os.environ["EVENT_ID_PINMSG"] = event_id_pinmsg

    assert response.status_code == 200

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" in response.json(), "The key 'event_id' is not found in the JSON response"


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
def test_unpinnedmsg(api_client):
    event_id_pinmsg = os.environ.get("EVENT_ID_PINMSG")
    if event_id_pinmsg is None:
        pytest.skip("event_id_pinmsg –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞")

    data = {}

    response = api_client.post_token_adm(f"{api_client.roomB}%3Amatrix.netreportservice.xyz/redact/{event_id_pinmsg}",
                                         json=data)

    assert response.status_code == 200

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–µ json
    assert "event_id" in response.json(), "The key 'event_id' is not found in the JSON response"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–∞
def test_blockplayers(api_client):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∑–∞–±–∞–Ω–Ω–µ–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –î–û
    getuserbanbefore = api_client.getuserban()
    total_before = getuserbanbefore.json()["pagination"]["total"]

    event_id = os.environ.get("EVENT_ID_B")
    if event_id is None:
        responseB = api_client.sendmessages(response_a=False)
        event_id = os.environ.get("EVENT_ID_B")

    data = {
        "autoBanned": False,
        "nodeUid": api_client.xnodeid,
        "roomUid": api_client.roomB,
        "userUid": f"@{api_client.senderid}",
        "blockedBy": "@a524d297-b434-4957-85fc-ff6afff99e9b:matrix.netreportservice.xyz",
        "message": "Text Test",
        "duration": 3600,
        "messageId": event_id,
        "reason": "harassmentOffensiveLanguage",
        "nodeId": api_client.xnodeid
    }

    url = (
        f"api/v1/synapse/user/ban?"
        f"autoBanned=false&"
        f"nodeUid={quote(api_client.xnodeid)}&"
        f"roomUid={quote(api_client.roomB)}%3Amatrix.netreportservice.xyz&"
        f"userUid={quote(f'@{api_client.senderid}')}%3Amatrix.netreportservice.xyz&"
        f"blockedBy={quote(f'@{api_client.senderid_adm}')}%3Amatrix.netreportservice.xyz&"
        f"message=Text+Test&"
        f"messageId={quote(event_id.encode())}&"
        f"duration=3600&"
        f"reason=harassmentOffensiveLanguage&"
        f"nodeId={quote(api_client.xnodeid)}"
    )

    response = api_client.post_token_s(url, json=data)
    #–î–µ–ª–∞–µ–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —É—Å–ø–µ–ª –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    time.sleep(3)
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∑–∞–±–∞–Ω–Ω–µ–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ü–û–°–õ–ï
    getuserbanafter = api_client.getuserban()
    total_after = getuserbanafter.json()["pagination"]["total"]

    assert response.status_code == 200

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω—ã–π –∫–ª—é—á –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
    assert "total" in getuserbanbefore.json()["pagination"], "The key 'total' is not found in the JSON response before"
    assert "total" in getuserbanafter.json()["pagination"], "The key 'total' is not found in the JSON response after"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ –æ–¥–∏–Ω
    assert total_after == total_before + 1, "The 'total' value did not increase by one"

    # #–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç
    # response_blockplayer = api_client.sendmessages(response_b=False)
    # assert "event_id" not in response_blockplayer.json(), "The key 'event_id' is found in the JSON response"



# ROOM A
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–±–∞–Ω–∞
def test_checkedspam(api_client):
    data = {"body": "Text Test Spam", "msgtype": "m.text",
            "senderId": f"@{api_client.senderid}:matrix.netreportservice.xyz"}

    for _ in range(51):
        response = api_client.post_token1(f"{api_client.roomA}%3Amatrix.netreportservice.xyz/send/m.room.message",
                                          json=data)
        if response.status_code != 200:
            break
        time.sleep(4)

    assert response.status_code == 500


